// Generated by psc-bundle 0.11.6
var PS = {};
(function(exports) {
    "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["Semigroupoid"] = Semigroupoid;
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Category = function (Semigroupoid0, id) {
      this.Semigroupoid0 = Semigroupoid0;
      this.id = id;
  };
  var id = function (dict) {
      return dict.id;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["id"] = id;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS["Data.Boolean"] = PS["Data.Boolean"] || {});
(function(exports) {
    "use strict";

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  exports.eqArrayImpl = function (f) {
    return function (xs) {
      return function (ys) {
        if (xs.length !== ys.length) return false;
        for (var i = 0; i < xs.length; i++) {
          if (!f(xs[i])(ys[i])) return false;
        }
        return true;
      };
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
    "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Show"];     
  var Show = function (show) {
      this.show = show;
  };                                                 
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Eq = function (eq) {
      this.eq = eq;
  };                                    
  var eqInt = new Eq($foreign.refEq); 
  var eqBoolean = new Eq($foreign.refEq);
  var eq = function (dict) {
      return dict.eq;
  };
  var eqArray = function (dictEq) {
      return new Eq($foreign.eqArrayImpl(eq(dictEq)));
  }; 
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["notEq"] = notEq;
  exports["eqBoolean"] = eqBoolean;
  exports["eqInt"] = eqInt;
  exports["eqArray"] = eqArray;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Semigroup = function (append) {
      this.append = append;
  };                                                         
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupArray"] = semigroupArray;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];        
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  var eqOrdering = new Data_Eq.Eq(function (v) {
      return function (v1) {
          if (v instanceof LT && v1 instanceof LT) {
              return true;
          };
          if (v instanceof GT && v1 instanceof GT) {
              return true;
          };
          if (v instanceof EQ && v1 instanceof EQ) {
              return true;
          };
          return false;
      };
  });
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
  exports["eqOrdering"] = eqOrdering;
})(PS["Data.Ordering"] = PS["Data.Ordering"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];        
  var unsafeCompare = $foreign.unsafeCompareImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
  exports["unsafeCompare"] = unsafeCompare;
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord_Unsafe = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  };                                
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, Data_Ord_Unsafe.unsafeCompare);
  var compare = function (dict) {
      return dict.compare;
  };
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return x;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord line 113, column 3 - line 116, column 12: " + [ v.constructor.name ]);
          };
      };
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["min"] = min;
  exports["ordInt"] = ordInt;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["const"] = $$const;
  exports["flip"] = flip;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };                                                                                             
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["void"] = $$void;
  exports["functorArray"] = functorArray;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Functor = PS["Data.Functor"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var Alt = function (Functor0, alt) {
      this.Functor0 = Functor0;
      this.alt = alt;
  };                                                       
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
})(PS["Control.Alt"] = PS["Control.Alt"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];        
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.id(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative line 57, column 1 - line 57, column 63: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
  exports["when"] = when;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var Discard = function (discard) {
      this.discard = discard;
  };
  var discard = function (dict) {
      return dict.discard;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var composeKleisliFlipped = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bindFlipped(dictBind)(f)(g(a));
              };
          };
      };
  };
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  exports["Bind"] = Bind;
  exports["Discard"] = Discard;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["composeKleisliFlipped"] = composeKleisliFlipped;
  exports["discard"] = discard;
  exports["discardUnit"] = discardUnit;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
  /* globals setImmediate, clearImmediate, setTimeout, clearTimeout */
  /* jshint -W083, -W098, -W003 */
  "use strict";

  var Aff = function () {
    // A unique value for empty.
    var EMPTY = {};

    /*

  An awkward approximation. We elide evidence we would otherwise need in PS for
  efficiency sake.

  data Aff eff a
    = Pure a
    | Throw Error
    | Catch (Aff eff a) (Error -> Aff eff a)
    | Sync (Eff eff a)
    | Async ((Either Error a -> Eff eff Unit) -> Eff eff (Canceler eff))
    | forall b. Bind (Aff eff b) (b -> Aff eff a)
    | forall b. Bracket (Aff eff b) (BracketConditions eff b) (b -> Aff eff a)
    | forall b. Fork Boolean (Aff eff b) ?(Fiber eff b -> a)
    | Sequential (ParAff aff a)

  */  
    var PURE    = "Pure";
    var THROW   = "Throw";
    var CATCH   = "Catch";
    var SYNC    = "Sync";
    var ASYNC   = "Async";
    var BIND    = "Bind";
    var BRACKET = "Bracket";
    var FORK    = "Fork";
    var SEQ     = "Sequential";

    /*

  data ParAff eff a
    = forall b. Map (b -> a) (ParAff eff b)
    | forall b. Apply (ParAff eff (b -> a)) (ParAff eff b)
    | Alt (ParAff eff a) (ParAff eff a)
    | ?Par (Aff eff a)

  */  
    var MAP   = "Map";
    var APPLY = "Apply";
    var ALT   = "Alt";

    // Various constructors used in interpretation
    var CONS      = "Cons";      // Cons-list, for stacks
    var RESUME    = "Resume";    // Continue indiscriminately
    var RELEASE   = "Release";   // Continue with bracket finalizers
    var FINALIZER = "Finalizer"; // A non-interruptible effect
    var FINALIZED = "Finalized"; // Marker for finalization
    var FORKED    = "Forked";    // Reference to a forked fiber, with resumption stack
    var FIBER     = "Fiber";     // Actual fiber reference
    var THUNK     = "Thunk";     // Primed effect, ready to invoke

    function Aff(tag, _1, _2, _3) {
      this.tag = tag;
      this._1  = _1;
      this._2  = _2;
      this._3  = _3;
    }

    function AffCtr(tag) {
      var fn = function (_1, _2, _3) {
        return new Aff(tag, _1, _2, _3);
      };
      fn.tag = tag;
      return fn;
    }

    function nonCanceler(error) {
      return new Aff(PURE, void 0);
    }

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    function runSync(left, right, eff) {
      try {
        return right(eff());
      } catch (error) {
        return left(error);
      }
    }

    function runAsync(left, eff, k) {
      try {
        return eff(k)();
      } catch (error) {
        k(left(error))();
        return nonCanceler;
      }
    }

    var Scheduler = function () {
      var limit    = 1024;
      var size     = 0;
      var ix       = 0;
      var queue    = new Array(limit);
      var draining = false;

      function drain() {
        var thunk;
        draining = true;
        while (size !== 0) {
          size--;
          thunk     = queue[ix];
          queue[ix] = void 0;
          ix        = (ix + 1) % limit;
          thunk();
        }
        draining = false;
      }

      return {
        isDraining: function () {
          return draining;
        },
        enqueue: function (cb) {
          var i, tmp;
          if (size === limit) {
            tmp = draining;
            drain();
            draining = tmp;
          }

          queue[(ix + size) % limit] = cb;
          size++;

          if (!draining) {
            drain();
          }
        }
      };
    }();

    function Supervisor(util) {
      var fibers  = {};
      var fiberId = 0;
      var count   = 0;

      return {
        register: function (fiber) {
          var fid = fiberId++;
          fiber.onComplete({
            rethrow: true,
            handler: function (result) {
              return function () {
                count--;
                delete fibers[fid];
              };
            }
          });
          fibers[fid] = fiber;
          count++;
        },
        isEmpty: function () {
          return count === 0;
        },
        killAll: function (killError, cb) {
          return function () {
            var killCount = 0;
            var kills     = {};

            function kill(fid) {
              kills[fid] = fibers[fid].kill(killError, function (result) {
                return function () {
                  delete kills[fid];
                  killCount--;
                  if (util.isLeft(result) && util.fromLeft(result)) {
                    setTimeout(function () {
                      throw util.fromLeft(result);
                    }, 0);
                  }
                  if (killCount === 0) {
                    cb();
                  }
                };
              })();
            }

            for (var k in fibers) {
              if (fibers.hasOwnProperty(k)) {
                killCount++;
                kill(k);
              }
            }

            fibers  = {};
            fiberId = 0;
            count   = 0;

            return function (error) {
              return new Aff(SYNC, function () {
                for (var k in kills) {
                  if (kills.hasOwnProperty(k)) {
                    kills[k]();
                  }
                }
              });
            };
          };
        }
      };
    }

    // Fiber state machine
    var SUSPENDED   = 0; // Suspended, pending a join.
    var CONTINUE    = 1; // Interpret the next instruction.
    var STEP_BIND   = 2; // Apply the next bind.
    var STEP_RESULT = 3; // Handle potential failure from a result.
    var PENDING     = 4; // An async effect is running.
    var RETURN      = 5; // The current stack has returned.
    var COMPLETED   = 6; // The entire fiber has completed.

    function Fiber(util, supervisor, aff) {
      // Monotonically increasing tick, increased on each asynchronous turn.
      var runTick = 0;

      // The current branch of the state machine.
      var status = SUSPENDED;

      // The current point of interest for the state machine branch.
      var step      = aff;  // Successful step
      var fail      = null; // Failure step
      var interrupt = null; // Asynchronous interrupt

      // Stack of continuations for the current fiber.
      var bhead = null;
      var btail = null;

      // Stack of attempts and finalizers for error recovery. Every `Cons` is also
      // tagged with current `interrupt` state. We use this to track which items
      // should be ignored or evaluated as a result of a kill.
      var attempts = null;

      // A special state is needed for Bracket, because it cannot be killed. When
      // we enter a bracket acquisition or finalizer, we increment the counter,
      // and then decrement once complete.
      var bracketCount = 0;

      // Each join gets a new id so they can be revoked.
      var joinId  = 0;
      var joins   = null;
      var rethrow = true;

      // Each invocation of `run` requires a tick. When an asynchronous effect is
      // resolved, we must check that the local tick coincides with the fiber
      // tick before resuming. This prevents multiple async continuations from
      // accidentally resuming the same fiber. A common example may be invoking
      // the provided callback in `makeAff` more than once, but it may also be an
      // async effect resuming after the fiber was already cancelled.
      function run(localRunTick) {
        var tmp, result, attempt, canceler;
        while (true) {
          tmp       = null;
          result    = null;
          attempt   = null;
          canceler  = null;

          switch (status) {
          case STEP_BIND:
            status = CONTINUE;
            step   = bhead(step);
            if (btail === null) {
              bhead = null;
            } else {
              bhead = btail._1;
              btail = btail._2;
            }
            break;

          case STEP_RESULT:
            if (util.isLeft(step)) {
              status = RETURN;
              fail   = step;
              step   = null;
            } else if (bhead === null) {
              status = RETURN;
            } else {
              status = STEP_BIND;
              step   = util.fromRight(step);
            }
            break;

          case CONTINUE:
            switch (step.tag) {
            case BIND:
              if (bhead) {
                btail = new Aff(CONS, bhead, btail);
              }
              bhead  = step._2;
              status = CONTINUE;
              step   = step._1;
              break;

            case PURE:
              if (bhead === null) {
                status = RETURN;
                step   = util.right(step._1);
              } else {
                status = STEP_BIND;
                step   = step._1;
              }
              break;

            case SYNC:
              status = STEP_RESULT;
              step   = runSync(util.left, util.right, step._1);
              break;

            case ASYNC:
              status = PENDING;
              step   = runAsync(util.left, step._1, function (result) {
                return function () {
                  if (runTick !== localRunTick) {
                    return;
                  }
                  runTick++;
                  Scheduler.enqueue(function () {
                    status = STEP_RESULT;
                    step   = result;
                    run(runTick);
                  });
                };
              });
              return;

            case THROW:
              status = RETURN;
              fail   = util.left(step._1);
              step   = null;
              break;

            // Enqueue the Catch so that we can call the error handler later on
            // in case of an exception.
            case CATCH:
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead    = null;
              btail    = null;
              status   = CONTINUE;
              step     = step._1;
              break;

            // Enqueue the Bracket so that we can call the appropriate handlers
            // after resource acquisition.
            case BRACKET:
              bracketCount++;
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead  = null;
              btail  = null;
              status = CONTINUE;
              step   = step._1;
              break;

            case FORK:
              status = STEP_RESULT;
              tmp    = Fiber(util, supervisor, step._2);
              if (supervisor) {
                supervisor.register(tmp);
              }
              if (step._1) {
                tmp.run();
              }
              step = util.right(tmp);
              break;

            case SEQ:
              status = CONTINUE;
              step   = sequential(util, supervisor, step._1);
              break;
            }
            break;

          case RETURN:
            bhead = null;
            btail = null;
            // If the current stack has returned, and we have no other stacks to
            // resume or finalizers to run, the fiber has halted and we can
            // invoke all join callbacks. Otherwise we need to resume.
            if (attempts === null) {
              status = COMPLETED;
              step   = interrupt || fail || step;
            } else {
              // The interrupt status for the enqueued item.
              tmp      = attempts._3;
              attempt  = attempts._1;
              attempts = attempts._2;

              switch (attempt.tag) {
              // We cannot recover from an interrupt. Otherwise we should
              // continue stepping, or run the exception handler if an exception
              // was raised.
              case CATCH:
                // We should compare the interrupt status as well because we
                // only want it to apply if there has been an interrupt since
                // enqueuing the catch.
                if (interrupt && interrupt !== tmp) {
                  status = RETURN;
                } else if (fail) {
                  status = CONTINUE;
                  step   = attempt._2(util.fromLeft(fail));
                  fail   = null;
                }
                break;

              // We cannot resume from an interrupt or exception.
              case RESUME:
                // As with Catch, we only want to ignore in the case of an
                // interrupt since enqueing the item.
                if (interrupt && interrupt !== tmp || fail) {
                  status = RETURN;
                } else {
                  bhead  = attempt._1;
                  btail  = attempt._2;
                  status = STEP_BIND;
                  step   = util.fromRight(step);
                }
                break;

              // If we have a bracket, we should enqueue the handlers,
              // and continue with the success branch only if the fiber has
              // not been interrupted. If the bracket acquisition failed, we
              // should not run either.
              case BRACKET:
                bracketCount--;
                if (fail === null) {
                  result   = util.fromRight(step);
                  // We need to enqueue the Release with the same interrupt
                  // status as the Bracket that is initiating it.
                  attempts = new Aff(CONS, new Aff(RELEASE, attempt._2, result), attempts, tmp);
                  // We should only coninue as long as the interrupt status has not changed or
                  // we are currently within a non-interruptable finalizer.
                  if (interrupt === tmp || bracketCount > 0) {
                    status = CONTINUE;
                    step   = attempt._3(result);
                  }
                }
                break;

              // Enqueue the appropriate handler. We increase the bracket count
              // because it should not be cancelled.
              case RELEASE:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step), attempts, interrupt);
                status   = CONTINUE;
                // It has only been killed if the interrupt status has changed
                // since we enqueued the item.
                if (interrupt && interrupt !== tmp) {
                  step = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                } else if (fail) {
                  step = attempt._1.failed(util.fromLeft(fail))(attempt._2);
                } else {
                  step = attempt._1.completed(util.fromRight(step))(attempt._2);
                }
                break;

              case FINALIZER:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step), attempts, interrupt);
                status   = CONTINUE;
                step     = attempt._1;
                break;

              case FINALIZED:
                bracketCount--;
                status = RETURN;
                step   = attempt._1;
                break;
              }
            }
            break;

          case COMPLETED:
            for (var k in joins) {
              if (joins.hasOwnProperty(k)) {
                rethrow = rethrow && joins[k].rethrow;
                runEff(joins[k].handler(step));
              }
            }
            joins = null;
            // If we have an interrupt and a fail, then the thread threw while
            // running finalizers. This should always rethrow in a fresh stack.
            if (interrupt && fail) {
              setTimeout(function () {
                throw util.fromLeft(fail);
              }, 0);
            // If we have an unhandled exception, and no other fiber has joined
            // then we need to throw the exception in a fresh stack.
            } else if (util.isLeft(step) && rethrow) {
              setTimeout(function () {
                // Guard on reathrow because a completely synchronous fiber can
                // still have an observer which was added after-the-fact.
                if (rethrow) {
                  throw util.fromLeft(step);
                }
              }, 0);
            }
            return;
          case SUSPENDED:
            status = CONTINUE;
            break;
          case PENDING: return;
          }
        }
      }

      function onComplete(join) {
        return function () {
          if (status === COMPLETED) {
            rethrow = rethrow && join.rethrow;
            join.handler(step)();
            return function () {};
          }

          var jid    = joinId++;
          joins      = joins || {};
          joins[jid] = join;

          return function() {
            if (joins !== null) {
              delete joins[jid];
            }
          };
        };
      }

      function kill(error, cb) {
        return function () {
          if (status === COMPLETED) {
            cb(util.right(void 0))();
            return function () {};
          }

          var canceler = onComplete({
            rethrow: false,
            handler: function (/* unused */) {
              return cb(util.right(void 0));
            }
          })();

          switch (status) {
          case SUSPENDED:
            interrupt = util.left(error);
            status    = COMPLETED;
            step      = interrupt;
            run(runTick);
            break;
          case PENDING:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              if (status === PENDING) {
                attempts = new Aff(CONS, new Aff(FINALIZER, step(error)), attempts, interrupt);
              }
              status   = RETURN;
              step     = null;
              fail     = null;
              run(++runTick);
            }
            break;
          default:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              status = RETURN;
              step   = null;
              fail   = null;
            }
          }

          return canceler;
        };
      }

      function join(cb) {
        return function () {
          var canceler = onComplete({
            rethrow: false,
            handler: cb
          })();
          if (status === SUSPENDED) {
            run(runTick);
          }
          return canceler;
        };
      }

      return {
        kill: kill,
        join: join,
        onComplete: onComplete,
        isSuspended: function () {
          return status === SUSPENDED;
        },
        run: function () {
          if (status === SUSPENDED) {
            if (!Scheduler.isDraining()) {
              Scheduler.enqueue(function () {
                run(runTick);
              });
            } else {
              run(runTick);
            }
          }
        }
      };
    }

    function runPar(util, supervisor, par, cb) {
      // Table of all forked fibers.
      var fiberId   = 0;
      var fibers    = {};

      // Table of currently running cancelers, as a product of `Alt` behavior.
      var killId    = 0;
      var kills     = {};

      // Error used for early cancelation on Alt branches.
      var early     = new Error("[ParAff] Early exit");

      // Error used to kill the entire tree.
      var interrupt = null;

      // The root pointer of the tree.
      var root      = EMPTY;

      // Walks a tree, invoking all the cancelers. Returns the table of pending
      // cancellation fibers.
      function kill(error, par, cb) {
        var step  = par;
        var head  = null;
        var tail  = null;
        var count = 0;
        var kills = {};
        var tmp, kid;

        loop: while (true) {
          tmp = null;

          switch (step.tag) {
          case FORKED:
            if (step._3 === EMPTY) {
              tmp = fibers[step._1];
              kills[count++] = tmp.kill(error, function (result) {
                return function () {
                  count--;
                  if (count === 0) {
                    cb(result)();
                  }
                };
              });
            }
            // Terminal case.
            if (head === null) {
              break loop;
            }
            // Go down the right side of the tree.
            step = head._2;
            if (tail === null) {
              head = null;
            } else {
              head = tail._1;
              tail = tail._2;
            }
            break;
          case MAP:
            step = step._2;
            break;
          case APPLY:
          case ALT:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = step;
            step = step._1;
            break;
          }
        }

        if (count === 0) {
          cb(util.right(void 0))();
        } else {
          // Run the cancelation effects. We alias `count` because it's mutable.
          kid = 0;
          tmp = count;
          for (; kid < tmp; kid++) {
            kills[kid] = kills[kid]();
          }
        }

        return kills;
      }

      // When a fiber resolves, we need to bubble back up the tree with the
      // result, computing the applicative nodes.
      function join(result, head, tail) {
        var fail, step, lhs, rhs, tmp, kid;

        if (util.isLeft(result)) {
          fail = result;
          step = null;
        } else {
          step = result;
          fail = null;
        }

        loop: while (true) {
          lhs = null;
          rhs = null;
          tmp = null;
          kid = null;

          // We should never continue if the entire tree has been interrupted.
          if (interrupt !== null) {
            return;
          }

          // We've made it all the way to the root of the tree, which means
          // the tree has fully evaluated.
          if (head === null) {
            cb(fail || step)();
            return;
          }

          // The tree has already been computed, so we shouldn't try to do it
          // again. This should never happen.
          // TODO: Remove this?
          if (head._3 !== EMPTY) {
            return;
          }

          switch (head.tag) {
          case MAP:
            if (fail === null) {
              head._3 = util.right(head._1(util.fromRight(step)));
              step    = head._3;
            } else {
              head._3 = fail;
            }
            break;
          case APPLY:
            lhs = head._1._3;
            rhs = head._2._3;
            // If we have a failure we should kill the other side because we
            // can't possible yield a result anymore.
            if (fail) {
              head._3 = fail;
              tmp     = true;
              kid     = killId++;

              kills[kid] = kill(early, fail === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(step, null, null);
                  } else {
                    join(step, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            } else if (lhs === EMPTY || rhs === EMPTY) {
              // We can only proceed if both sides have resolved.
              return;
            } else {
              step    = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
              head._3 = step;
            }
            break;
          case ALT:
            lhs = head._1._3;
            rhs = head._2._3;
            // We can only proceed if both have resolved or we have a success
            if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
              return;
            }
            // If both sides resolve with an error, we should continue with the
            // first error
            if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
              fail    = step === lhs ? rhs : lhs;
              step    = null;
              head._3 = fail;
            } else {
              head._3 = step;
              tmp     = true;
              kid     = killId++;
              // Once a side has resolved, we need to cancel the side that is still
              // pending before we can continue.
              kills[kid] = kill(early, step === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(step, null, null);
                  } else {
                    join(step, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            }
            break;
          }

          if (tail === null) {
            head = null;
          } else {
            head = tail._1;
            tail = tail._2;
          }
        }
      }

      function resolve(fiber) {
        return function (result) {
          return function () {
            delete fibers[fiber._1];
            fiber._3 = result;
            join(result, fiber._2._1, fiber._2._2);
          };
        };
      }

      // Walks the applicative tree, substituting non-applicative nodes with
      // `FORKED` nodes. In this tree, all applicative nodes use the `_3` slot
      // as a mutable slot for memoization. In an unresolved state, the `_3`
      // slot is `EMPTY`. In the cases of `ALT` and `APPLY`, we always walk
      // the left side first, because both operations are left-associative. As
      // we `RETURN` from those branches, we then walk the right side.
      function run() {
        var status = CONTINUE;
        var step   = par;
        var head   = null;
        var tail   = null;
        var tmp, fid;

        loop: while (true) {
          tmp = null;
          fid = null;

          switch (status) {
          case CONTINUE:
            switch (step.tag) {
            case MAP:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(MAP, step._1, EMPTY, EMPTY);
              step = step._2;
              break;
            case APPLY:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(APPLY, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            case ALT:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(ALT, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            default:
              // When we hit a leaf value, we suspend the stack in the `FORKED`.
              // When the fiber resolves, it can bubble back up the tree.
              fid    = fiberId++;
              status = RETURN;
              tmp    = step;
              step   = new Aff(FORKED, fid, new Aff(CONS, head, tail), EMPTY);
              tmp    = Fiber(util, supervisor, tmp);
              tmp.onComplete({
                rethrow: false,
                handler: resolve(step)
              })();
              fibers[fid] = tmp;
              if (supervisor) {
                supervisor.register(tmp);
              }
            }
            break;
          case RETURN:
            // Terminal case, we are back at the root.
            if (head === null) {
              break loop;
            }
            // If we are done with the right side, we need to continue down the
            // left. Otherwise we should continue up the stack.
            if (head._1 === EMPTY) {
              head._1 = step;
              status  = CONTINUE;
              step    = head._2;
              head._2 = EMPTY;
            } else {
              head._2 = step;
              step    = head;
              if (tail === null) {
                head  = null;
              } else {
                head  = tail._1;
                tail  = tail._2;
              }
            }
          }
        }

        // Keep a reference to the tree root so it can be cancelled.
        root = step;

        for (fid = 0; fid < fiberId; fid++) {
          fibers[fid].run();
        }
      }

      // Cancels the entire tree. If there are already subtrees being canceled,
      // we need to first cancel those joins. We will then add fresh joins for
      // all pending branches including those that were in the process of being
      // canceled.
      function cancel(error, cb) {
        interrupt = util.left(error);
        var innerKills;
        for (var kid in kills) {
          if (kills.hasOwnProperty(kid)) {
            innerKills = kills[kid];
            for (kid in innerKills) {
              if (innerKills.hasOwnProperty(kid)) {
                innerKills[kid]();
              }
            }
          }
        }

        kills = null;
        var newKills = kill(error, root, cb);

        return function (killError) {
          return new Aff(ASYNC, function (killCb) {
            return function () {
              for (var kid in newKills) {
                if (newKills.hasOwnProperty(kid)) {
                  newKills[kid]();
                }
              }
              return nonCanceler;
            };
          });
        };
      }

      run();

      return function (killError) {
        return new Aff(ASYNC, function (killCb) {
          return function () {
            return cancel(killError, killCb);
          };
        });
      };
    }

    function sequential(util, supervisor, par) {
      return new Aff(ASYNC, function (cb) {
        return function () {
          return runPar(util, supervisor, par, cb);
        };
      });
    }

    Aff.EMPTY       = EMPTY;
    Aff.Pure        = AffCtr(PURE);
    Aff.Throw       = AffCtr(THROW);
    Aff.Catch       = AffCtr(CATCH);
    Aff.Sync        = AffCtr(SYNC);
    Aff.Async       = AffCtr(ASYNC);
    Aff.Bind        = AffCtr(BIND);
    Aff.Bracket     = AffCtr(BRACKET);
    Aff.Fork        = AffCtr(FORK);
    Aff.Seq         = AffCtr(SEQ);
    Aff.ParMap      = AffCtr(MAP);
    Aff.ParApply    = AffCtr(APPLY);
    Aff.ParAlt      = AffCtr(ALT);
    Aff.Fiber       = Fiber;
    Aff.Supervisor  = Supervisor;
    Aff.Scheduler   = Scheduler;
    Aff.nonCanceler = nonCanceler;

    return Aff;
  }();

  exports._pure = Aff.Pure;

  exports._throwError = Aff.Throw;

  exports._map = function (f) {
    return function (aff) {
      if (aff.tag === Aff.Pure.tag) {
        return Aff.Pure(f(aff._1));
      } else {
        return Aff.Bind(aff, function (value) {
          return Aff.Pure(f(value));
        });
      }
    };
  };

  exports._bind = function (aff) {
    return function (k) {
      return Aff.Bind(aff, k);
    };
  };

  exports._liftEff = Aff.Sync;

  exports._parAffMap = function (f) {
    return function (aff) {
      return Aff.ParMap(f, aff);
    };
  };

  exports._parAffApply = function (aff1) {
    return function (aff2) {
      return Aff.ParApply(aff1, aff2);
    };
  };

  exports.makeAff = Aff.Async;

  exports._makeFiber = function (util, aff) {
    return function () {
      return Aff.Fiber(util, null, aff);
    };
  };  

  exports._sequential = Aff.Seq;
})(PS["Control.Monad.Aff"] = PS["Control.Monad.Aff"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.runPure = function (f) {
    return f();
  };

  exports.foreachE = function (as) {
    return function (f) {
      return function () {
        for (var i = 0, l = as.length; i < l; i++) {
          f(as[i])();
        }
      };
    };
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };       
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];        
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
  exports["foreachE"] = $foreign.foreachE;
  exports["runPure"] = $foreign.runPure;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];        
  var MonadEff = function (Monad0, liftEff) {
      this.Monad0 = Monad0;
      this.liftEff = liftEff;
  };                                                   
  var liftEff = function (dict) {
      return dict.liftEff;
  };
  exports["MonadEff"] = MonadEff;
  exports["liftEff"] = liftEff;
})(PS["Control.Monad.Eff.Class"] = PS["Control.Monad.Eff.Class"] || {});
(function(exports) {
    "use strict";

  exports.error = function (msg) {
    return new Error(msg);
  };
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Category = PS["Control.Category"];        
  var Bifunctor = function (bimap) {
      this.bimap = bimap;
  };
  var bimap = function (dict) {
      return dict.bimap;
  };
  var lmap = function (dictBifunctor) {
      return function (f) {
          return bimap(dictBifunctor)(f)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  exports["Bifunctor"] = Bifunctor;
  exports["bimap"] = bimap;
  exports["lmap"] = lmap;
})(PS["Data.Bifunctor"] = PS["Data.Bifunctor"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Data_Functor = PS["Data.Functor"];        
  var Plus = function (Alt0, empty) {
      this.Alt0 = Alt0;
      this.empty = empty;
  };       
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
})(PS["Control.Plus"] = PS["Control.Plus"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 219, column 1 - line 219, column 51: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };                                                      
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 68, column 1 - line 68, column 35: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 127, column 1 - line 127, column 33: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["bindMaybe"] = bindMaybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Prelude = PS["Prelude"];        
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };
  exports["Newtype"] = Newtype;
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
})(PS["Data.Newtype"] = PS["Data.Newtype"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)(function ($195) {
                  return Control_Apply.applySecond(dictApplicative.Apply0())(f($195));
              })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldableMaybe = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v instanceof Data_Maybe.Just) {
                  return f(v.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable line 131, column 1 - line 131, column 41: " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(z)(v1.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable line 131, column 1 - line 131, column 41: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(v1.value0)(z);
              };
              throw new Error("Failed pattern match at Data.Foldable line 131, column 1 - line 131, column 41: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  exports["Foldable"] = Foldable;
  exports["foldMap"] = foldMap;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["for_"] = for_;
  exports["traverse_"] = traverse_;
  exports["foldableMaybe"] = foldableMaybe;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];        
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Left) {
              return new Left(v1.value0);
          };
          if (v1 instanceof Right) {
              return new Right(v(v1.value0));
          };
          throw new Error("Failed pattern match at Data.Either line 36, column 1 - line 36, column 45: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 229, column 1 - line 229, column 64: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var bifunctorEither = new Data_Bifunctor.Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return new Left(v(v2.value0));
              };
              if (v2 instanceof Right) {
                  return new Right(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Data.Either line 43, column 1 - line 43, column 45: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  var applyEither = new Control_Apply.Apply(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return Data_Functor.map(functorEither)(v.value0)(v1);
          };
          throw new Error("Failed pattern match at Data.Either line 79, column 1 - line 79, column 41: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindEither = new Control_Bind.Bind(function () {
      return applyEither;
  }, either(function (e) {
      return function (v) {
          return new Left(e);
      };
  })(function (a) {
      return function (f) {
          return f(a);
      };
  }));
  var applicativeEither = new Control_Applicative.Applicative(function () {
      return applyEither;
  }, Right.create);
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["functorEither"] = functorEither;
  exports["bifunctorEither"] = bifunctorEither;
  exports["applyEither"] = applyEither;
  exports["applicativeEither"] = applicativeEither;
  exports["bindEither"] = bindEither;
})(PS["Data.Either"] = PS["Data.Either"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Exception"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];
  exports["error"] = $foreign.error;
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCoerceEff = function (f) {
    return f;
  };
})(PS["Control.Monad.Eff.Unsafe"] = PS["Control.Monad.Eff.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  exports["unsafeCoerceEff"] = $foreign.unsafeCoerceEff;
})(PS["Control.Monad.Eff.Unsafe"] = PS["Control.Monad.Eff.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var MonadThrow = function (Monad0, throwError) {
      this.Monad0 = Monad0;
      this.throwError = throwError;
  };
  var throwError = function (dict) {
      return dict.throwError;
  };
  exports["MonadThrow"] = MonadThrow;
  exports["throwError"] = throwError;
})(PS["Control.Monad.Error.Class"] = PS["Control.Monad.Error.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Distributive = PS["Data.Distributive"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Type_Equality = PS["Type.Equality"];        
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  exports["Tuple"] = Tuple;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];        
  var ExceptT = function (x) {
      return x;
  };
  var runExceptT = function (v) {
      return v;
  }; 
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
      });
  };
  var monadExceptT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeExceptT(dictMonad);
      }, function () {
          return bindExceptT(dictMonad);
      });
  };
  var bindExceptT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either(function ($97) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Left.create($97));
              })(function (a) {
                  var v1 = k(a);
                  return v1;
              }));
          };
      });
  };
  var applyExceptT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadExceptT(dictMonad)));
  };
  var applicativeExceptT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyExceptT(dictMonad);
      }, function ($98) {
          return ExceptT(Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Right.create($98)));
      });
  };
  var monadThrowExceptT = function (dictMonad) {
      return new Control_Monad_Error_Class.MonadThrow(function () {
          return monadExceptT(dictMonad);
      }, function ($102) {
          return ExceptT(Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Left.create($102)));
      });
  };
  exports["ExceptT"] = ExceptT;
  exports["mapExceptT"] = mapExceptT;
  exports["runExceptT"] = runExceptT;
  exports["functorExceptT"] = functorExceptT;
  exports["applyExceptT"] = applyExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["monadExceptT"] = monadExceptT;
  exports["monadThrowExceptT"] = monadThrowExceptT;
})(PS["Control.Monad.Except.Trans"] = PS["Control.Monad.Except.Trans"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Cont_Trans = PS["Control.Monad.Cont.Trans"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Monad_Maybe_Trans = PS["Control.Monad.Maybe.Trans"];
  var Control_Monad_Reader_Trans = PS["Control.Monad.Reader.Trans"];
  var Control_Monad_Writer_Trans = PS["Control.Monad.Writer.Trans"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Compose = PS["Data.Functor.Compose"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Parallel = function (Applicative1, Monad0, parallel, sequential) {
      this.Applicative1 = Applicative1;
      this.Monad0 = Monad0;
      this.parallel = parallel;
      this.sequential = sequential;
  };                                                           
  var sequential = function (dict) {
      return dict.sequential;
  };
  var parallel = function (dict) {
      return dict.parallel;
  };
  exports["Parallel"] = Parallel;
  exports["parallel"] = parallel;
  exports["sequential"] = sequential;
})(PS["Control.Parallel.Class"] = PS["Control.Parallel.Class"] || {});
(function(exports) {
    "use strict";

  exports.runFn2 = function (fn) {
    return function (a) {
      return function (b) {
        return fn(a, b);
      };
    };
  };

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Function.Uncurried"];
  var Data_Unit = PS["Data.Unit"];
  exports["runFn2"] = $foreign.runFn2;
  exports["runFn4"] = $foreign.runFn4;
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
    "use strict";

  // module Partial.Unsafe

  exports.unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
    "use strict";

  // module Partial

  exports.crashWith = function () {
    return function (msg) {
      throw new Error(msg);
    };
  };
})(PS["Partial"] = PS["Partial"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Partial"];
  exports["crashWith"] = $foreign.crashWith;
})(PS["Partial"] = PS["Partial"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Partial.Unsafe"];
  var Partial = PS["Partial"];
  var unsafeCrashWith = function (msg) {
      return $foreign.unsafePartial(function (dictPartial) {
          return Partial.crashWith(dictPartial)(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
    "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Monad.Aff"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Parallel = PS["Control.Parallel"];
  var Control_Parallel_Class = PS["Control.Parallel.Class"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Canceler = function (x) {
      return x;
  };           
  var functorParAff = new Data_Functor.Functor($foreign._parAffMap);
  var functorAff = new Data_Functor.Functor($foreign._map);
  var ffiUtil = (function () {
      var unsafeFromRight = function (v) {
          if (v instanceof Data_Either.Right) {
              return v.value0;
          };
          if (v instanceof Data_Either.Left) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromRight: Left");
          };
          throw new Error("Failed pattern match at Control.Monad.Aff line 402, column 21 - line 404, column 31: " + [ v.constructor.name ]);
      };
      var unsafeFromLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return v.value0;
          };
          if (v instanceof Data_Either.Right) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromLeft: Right");
          };
          throw new Error("Failed pattern match at Control.Monad.Aff line 397, column 20 - line 401, column 3: " + [ v.constructor.name ]);
      };
      var isLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return true;
          };
          if (v instanceof Data_Either.Right) {
              return false;
          };
          throw new Error("Failed pattern match at Control.Monad.Aff line 392, column 12 - line 394, column 20: " + [ v.constructor.name ]);
      };
      return {
          isLeft: isLeft, 
          fromLeft: unsafeFromLeft, 
          fromRight: unsafeFromRight, 
          left: Data_Either.Left.create, 
          right: Data_Either.Right.create
      };
  })();
  var makeFiber = function (aff) {
      return $foreign._makeFiber(ffiUtil, aff);
  };
  var launchAff = function (aff) {
      return function __do() {
          var v = makeFiber(aff)();
          v.run();
          return v;
      };
  };
  var applyParAff = new Control_Apply.Apply(function () {
      return functorParAff;
  }, $foreign._parAffApply);
  var monadAff = new Control_Monad.Monad(function () {
      return applicativeAff;
  }, function () {
      return bindAff;
  });
  var bindAff = new Control_Bind.Bind(function () {
      return applyAff;
  }, $foreign._bind);
  var applyAff = new Control_Apply.Apply(function () {
      return functorAff;
  }, Control_Monad.ap(monadAff));
  var applicativeAff = new Control_Applicative.Applicative(function () {
      return applyAff;
  }, $foreign._pure);
  var monadEffAff = new Control_Monad_Eff_Class.MonadEff(function () {
      return monadAff;
  }, $foreign._liftEff);
  var effCanceler = function ($50) {
      return Canceler(Data_Function["const"](Control_Monad_Eff_Class.liftEff(monadEffAff)($50)));
  };
  var monadThrowAff = new Control_Monad_Error_Class.MonadThrow(function () {
      return monadAff;
  }, $foreign._throwError);
  var parallelAff = new Control_Parallel_Class.Parallel(function () {
      return applicativeParAff;
  }, function () {
      return monadAff;
  }, Unsafe_Coerce.unsafeCoerce, $foreign._sequential);
  var applicativeParAff = new Control_Applicative.Applicative(function () {
      return applyParAff;
  }, function ($54) {
      return Control_Parallel_Class.parallel(parallelAff)(Control_Applicative.pure(applicativeAff)($54));
  });
  exports["Canceler"] = Canceler;
  exports["effCanceler"] = effCanceler;
  exports["launchAff"] = launchAff;
  exports["functorAff"] = functorAff;
  exports["applyAff"] = applyAff;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadAff"] = monadAff;
  exports["monadThrowAff"] = monadThrowAff;
  exports["monadEffAff"] = monadEffAff;
  exports["functorParAff"] = functorParAff;
  exports["applyParAff"] = applyParAff;
  exports["applicativeParAff"] = applicativeParAff;
  exports["parallelAff"] = parallelAff;
  exports["makeAff"] = $foreign.makeAff;
})(PS["Control.Monad.Aff"] = PS["Control.Monad.Aff"] || {});
(function(exports) {
  /* globals exports, setTimeout */
  /* jshint -W097 */

  "use strict";

  var AVar = function () {
    function MutableQueue () {
      this.head = null;
      this.last = null;
      this.size = 0;
    }

    function MutableCell (queue, value) {
      this.queue = queue;
      this.value = value;
      this.next  = null;
      this.prev  = null;
    }

    function AVar (value) {
      this.draining = false;
      this.error    = null;
      this.value    = value;
      this.takes    = new MutableQueue();
      this.reads    = new MutableQueue();
      this.puts     = new MutableQueue();
    }

    var EMPTY = {};

    function putLast (queue, value) {
      var cell = new MutableCell(queue, value);
      switch (queue.size) {
      case 0:
        queue.head = cell;
        break;
      case 1:
        cell.prev = queue.head;
        queue.head.next = cell;
        queue.last = cell;
        break;
      default:
        cell.prev = queue.last;
        queue.last.next = cell;
        queue.last = cell;
      }
      queue.size++;
      return cell;
    }

    function takeLast (queue) {
      var cell;
      switch (queue.size) {
      case 0:
        return null;
      case 1:
        cell = queue.head;
        queue.head = null;
        break;
      case 2:
        cell = queue.last;
        queue.head.next = null;
        queue.last = null;
        break;
      default:
        cell = queue.last;
        queue.last = cell.prev;
        queue.last.next = null;
      }
      cell.prev = null;
      cell.queue = null;
      queue.size--;
      return cell.value;
    }

    function takeHead (queue) {
      var cell;
      switch (queue.size) {
      case 0:
        return null;
      case 1:
        cell = queue.head;
        queue.head = null;
        break;
      case 2:
        cell = queue.head;
        queue.last.prev = null;
        queue.head = queue.last;
        queue.last = null;
        break;
      default:
        cell = queue.head;
        queue.head = cell.next;
        queue.head.prev = null;
      }
      cell.next = null;
      cell.queue = null;
      queue.size--;
      return cell.value;
    }

    function deleteCell (cell) {
      if (cell.queue === null) {
        return;
      }
      if (cell.queue.last === cell) {
        takeLast(cell.queue);
        return;
      }
      if (cell.queue.head === cell) {
        takeHead(cell.queue);
        return;
      }
      if (cell.prev) {
        cell.prev.next = cell.next;
      }
      if (cell.next) {
        cell.next.prev = cell.prev;
      }
      cell.queue.size--;
      cell.queue = null;
      cell.value = null;
      cell.next  = null;
      cell.prev  = null;
    }

    function drainVar (util, avar) {
      if (avar.draining) {
        return;
      }

      var ps = avar.puts;
      var ts = avar.takes;
      var rs = avar.reads;
      var p, r, t, value, rsize;

      avar.draining = true;

      /* jshint -W084 */
      while (1) {
        p = null;
        r = null;
        t = null;
        value = avar.value;
        rsize = rs.size;

        if (avar.error !== null) {
          value = util.left(avar.error);
          while (p = takeHead(ps)) {
            runEff(p.cb(value));
          }
          while (r = takeHead(rs)) {
            runEff(r(value));
          }
          while (t = takeHead(ts)) {
            runEff(t(value));
          }
          break;
        }

        // Process the next put. We do not immediately invoke the callback
        // because we want to preserve ordering. If there are takes/reads
        // we want to run those first.
        if (value === EMPTY && (p = takeHead(ps))) {
          avar.value = value = p.value;
        }

        if (value !== EMPTY) {
          // We go ahead and queue up the next take for the same reasons as
          // above. Invoking the read callbacks can affect the mutable queue.
          t = takeHead(ts);
          // We only want to process the reads queued up before running these
          // callbacks so we guard on rsize.
          while (rsize-- && (r = takeHead(rs))) {
            runEff(r(util.right(value)));
          }
          if (t !== null) {
            avar.value = EMPTY;
            runEff(t(util.right(value)));
          }
        }

        if (p !== null) {
          runEff(p.cb(util.right(void 0)));
        }

        // Callbacks could have queued up more items so we need to guard on the
        // actual mutable properties.
        if (avar.value === EMPTY && ps.size === 0 || avar.value !== EMPTY && ts.size === 0) {
          break;
        }
      }
      /* jshint +W084 */

      avar.draining = false;
    }

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    AVar.EMPTY      = EMPTY;
    AVar.putLast    = putLast;
    AVar.takeLast   = takeLast;
    AVar.takeHead   = takeHead;
    AVar.deleteCell = deleteCell;
    AVar.drainVar   = drainVar;

    return AVar;
  }();

  exports.makeEmptyVar = function () {
    return new AVar(AVar.EMPTY);
  };

  exports.makeVar = function (value) {
    return function () {
      return new AVar(value);
    };
  };

  exports._putVar = function (util, value, avar, cb) {
    return function () {
      var cell = AVar.putLast(avar.puts, { cb: cb, value: value });
      AVar.drainVar(util, avar);
      return function () {
        AVar.deleteCell(cell);
      };
    };
  };

  exports._takeVar = function (util, avar, cb) {
    return function () {
      var cell = AVar.putLast(avar.takes, cb);
      AVar.drainVar(util, avar);
      return function () {
        AVar.deleteCell(cell);
      };
    };
  };

  exports._readVar = function (util, avar, cb) {
    return function () {
      var cell = AVar.putLast(avar.reads, cb);
      AVar.drainVar(util, avar);
      return function () {
        AVar.deleteCell(cell);
      };
    };
  };

  exports._tryTakeVar = function (util, avar) {
    return function () {
      var value = avar.value;
      if (value === AVar.EMPTY) {
        return util.nothing;
      } else {
        avar.value = AVar.EMPTY;
        AVar.drainVar(util, avar);
        return util.just(value);
      }
    };
  };
})(PS["Control.Monad.Eff.AVar"] = PS["Control.Monad.Eff.AVar"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Monad.Eff.AVar"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Prelude = PS["Prelude"];        
  var Killed = (function () {
      function Killed(value0) {
          this.value0 = value0;
      };
      Killed.create = function (value0) {
          return new Killed(value0);
      };
      return Killed;
  })();
  var Filled = (function () {
      function Filled(value0) {
          this.value0 = value0;
      };
      Filled.create = function (value0) {
          return new Filled(value0);
      };
      return Filled;
  })();
  var Empty = (function () {
      function Empty() {

      };
      Empty.value = new Empty();
      return Empty;
  })();
  var ffiUtil = {
      left: Data_Either.Left.create, 
      right: Data_Either.Right.create, 
      nothing: Data_Maybe.Nothing.value, 
      just: Data_Maybe.Just.create, 
      killed: Killed.create, 
      filled: Filled.create, 
      empty: Empty.value
  };
  var putVar = function (value) {
      return function (avar) {
          return function (cb) {
              return $foreign._putVar(ffiUtil, value, avar, cb);
          };
      };
  };
  var readVar = function (avar) {
      return function (cb) {
          return $foreign._readVar(ffiUtil, avar, cb);
      };
  };
  var takeVar = function (avar) {
      return function (cb) {
          return $foreign._takeVar(ffiUtil, avar, cb);
      };
  };
  var tryTakeVar = function (avar) {
      return $foreign._tryTakeVar(ffiUtil, avar);
  };
  exports["Killed"] = Killed;
  exports["Filled"] = Filled;
  exports["Empty"] = Empty;
  exports["putVar"] = putVar;
  exports["readVar"] = readVar;
  exports["takeVar"] = takeVar;
  exports["tryTakeVar"] = tryTakeVar;
  exports["makeEmptyVar"] = $foreign.makeEmptyVar;
  exports["makeVar"] = $foreign.makeVar;
})(PS["Control.Monad.Eff.AVar"] = PS["Control.Monad.Eff.AVar"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_AVar = PS["Control.Monad.Eff.AVar"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Maybe = PS["Data.Maybe"];
  var Prelude = PS["Prelude"];        
  var tryTakeVar = function ($6) {
      return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_AVar.tryTakeVar($6));
  };
  var takeVar = function (avar) {
      return Control_Monad_Aff.makeAff(function (k) {
          return function __do() {
              var v = Control_Monad_Eff_AVar.takeVar(avar)(k)();
              return Control_Monad_Aff.effCanceler(v);
          };
      });
  };
  var readVar = function (avar) {
      return Control_Monad_Aff.makeAff(function (k) {
          return function __do() {
              var v = Control_Monad_Eff_AVar.readVar(avar)(k)();
              return Control_Monad_Aff.effCanceler(v);
          };
      });
  };
  var putVar = function (value) {
      return function (avar) {
          return Control_Monad_Aff.makeAff(function (k) {
              return function __do() {
                  var v = Control_Monad_Eff_AVar.putVar(value)(avar)(k)();
                  return Control_Monad_Aff.effCanceler(v);
              };
          });
      };
  };
  var makeVar = function ($10) {
      return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_AVar.makeVar($10));
  };
  var makeEmptyVar = Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_AVar.makeEmptyVar);
  exports["makeEmptyVar"] = makeEmptyVar;
  exports["makeVar"] = makeVar;
  exports["putVar"] = putVar;
  exports["readVar"] = readVar;
  exports["takeVar"] = takeVar;
  exports["tryTakeVar"] = tryTakeVar;
})(PS["Control.Monad.Aff.AVar"] = PS["Control.Monad.Aff.AVar"] || {});
(function(exports) {
    "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  exports["log"] = $foreign.log;
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Field = PS["Data.Field"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];        
  var Identity = function (x) {
      return x;
  };
  var newtypeIdentity = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Identity);
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var applyIdentity = new Control_Apply.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Control_Bind.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Control_Applicative.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Control_Monad.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  exports["Identity"] = Identity;
  exports["newtypeIdentity"] = newtypeIdentity;
  exports["functorIdentity"] = functorIdentity;
  exports["applyIdentity"] = applyIdentity;
  exports["applicativeIdentity"] = applicativeIdentity;
  exports["bindIdentity"] = bindIdentity;
  exports["monadIdentity"] = monadIdentity;
})(PS["Data.Identity"] = PS["Data.Identity"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Newtype = PS["Data.Newtype"];
  var Prelude = PS["Prelude"];                                                           
  var runExcept = function ($0) {
      return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(Control_Monad_Except_Trans.runExceptT($0));
  };
  exports["runExcept"] = runExcept;
})(PS["Control.Monad.Except"] = PS["Control.Monad.Except"] || {});
(function(exports) {
    "use strict";

  exports.eventListener = function (fn) {
    return function (event) {
      return fn(event)();
    };
  };

  exports.addEventListener = function (type) {
    return function (listener) {
      return function (useCapture) {
        return function (target) {
          return function () {
            target.addEventListener(type, listener, useCapture);
            return {};
          };
        };
      };
    };
  };
})(PS["DOM.Event.EventTarget"] = PS["DOM.Event.EventTarget"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.Event.EventTarget"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var DOM = PS["DOM"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var Prelude = PS["Prelude"];
  exports["addEventListener"] = $foreign.addEventListener;
  exports["eventListener"] = $foreign.eventListener;
})(PS["DOM.Event.EventTarget"] = PS["DOM.Event.EventTarget"] || {});
(function(exports) {
    "use strict";

  exports.toForeign = function (value) {
    return value;
  };

  exports.unsafeFromForeign = function (value) {
    return value;
  };

  exports.tagOf = function (value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  };
})(PS["Data.Foreign"] = PS["Data.Foreign"] || {});
(function(exports) {
    "use strict";

  // module Data.Int

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Int"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_DivisionRing = PS["Data.DivisionRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Field = PS["Data.Field"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Global = PS["Global"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];      
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["fromNumber"] = fromNumber;
  exports["toNumber"] = $foreign.toNumber;
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Prelude = PS["Prelude"];        
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  var singleton = function (dictPlus) {
      return function (a) {
          return new NonEmpty(a, Control_Plus.empty(dictPlus));
      };
  };
  exports["NonEmpty"] = NonEmpty;
  exports["singleton"] = singleton;
})(PS["Data.NonEmpty"] = PS["Data.NonEmpty"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];        
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var NonEmptyList = function (x) {
      return x;
  };
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($158) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f($158));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function ($copy_b) {
          return function ($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, v) {
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = f(b)(v.value0);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types line 81, column 12 - line 83, column 30: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_v);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
          return function ($159) {
              return Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b)(rev($159));
          };
      };
  });
  var functorList = new Data_Functor.Functor(function (f) {
      return Data_Foldable.foldr(foldableList)(function (x) {
          return function (acc) {
              return new Cons(f(x), acc);
          };
      })(Nil.value);
  });
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
      };
  });
  var monoidList = new Data_Monoid.Monoid(function () {
      return semigroupList;
  }, Nil.value);                                   
  var altList = new Control_Alt.Alt(function () {
      return functorList;
  }, Data_Semigroup.append(semigroupList));
  var plusList = new Control_Plus.Plus(function () {
      return altList;
  }, Nil.value);
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["NonEmptyList"] = NonEmptyList;
  exports["semigroupList"] = semigroupList;
  exports["monoidList"] = monoidList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["altList"] = altList;
  exports["plusList"] = plusList;
})(PS["Data.List.Types"] = PS["Data.List.Types"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var singleton = function ($160) {
      return Data_List_Types.NonEmptyList(Data_NonEmpty.singleton(Data_List_Types.plusList)($160));
  };
  exports["singleton"] = singleton;
})(PS["Data.List.NonEmpty"] = PS["Data.List.NonEmpty"] || {});
(function(exports) {
    "use strict";

  exports.toLower = function (s) {
    return s.toLowerCase();
  };
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.String"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];
  var Prelude = PS["Prelude"];
  exports["toLower"] = $foreign.toLower;
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Foreign"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Int = PS["Data.Int"];
  var Data_List_NonEmpty = PS["Data.List.NonEmpty"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Prelude = PS["Prelude"];
  var TypeMismatch = (function () {
      function TypeMismatch(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeMismatch.create = function (value0) {
          return function (value1) {
              return new TypeMismatch(value0, value1);
          };
      };
      return TypeMismatch;
  })();
  var fail = function ($121) {
      return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Data_Identity.monadIdentity))(Data_List_NonEmpty.singleton($121));
  };
  var unsafeReadTagged = function (tag) {
      return function (value) {
          if ($foreign.tagOf(value) === tag) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))($foreign.unsafeFromForeign(value));
          };
          if (Data_Boolean.otherwise) {
              return fail(new TypeMismatch(tag, $foreign.tagOf(value)));
          };
          throw new Error("Failed pattern match at Data.Foreign line 104, column 1 - line 104, column 55: " + [ tag.constructor.name, value.constructor.name ]);
      };
  };
  var readString = unsafeReadTagged("String");
  exports["TypeMismatch"] = TypeMismatch;
  exports["fail"] = fail;
  exports["readString"] = readString;
  exports["unsafeReadTagged"] = unsafeReadTagged;
  exports["toForeign"] = $foreign.toForeign;
})(PS["Data.Foreign"] = PS["Data.Foreign"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.History"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Prelude = PS["Prelude"];        
  var URL = function (x) {
      return x;
  };
  exports["URL"] = URL;
})(PS["DOM.HTML.History"] = PS["DOM.HTML.History"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var DOM_Event_Types = PS["DOM.Event.Types"];        
  var onOpen = "open";
  var onMessage = "message";
  var onClose = "close";
  exports["onClose"] = onClose;
  exports["onMessage"] = onMessage;
  exports["onOpen"] = onOpen;
})(PS["DOM.Websocket.Event.EventTypes"] = PS["DOM.Websocket.Event.EventTypes"] || {});
(function(exports) {
    "use strict";

  exports.data_ = function (e) {
    return e.data;
  };
})(PS["DOM.Websocket.Event.MessageEvent"] = PS["DOM.Websocket.Event.MessageEvent"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var Data_Foreign = PS["Data.Foreign"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var readMessageEvent = Data_Foreign.unsafeReadTagged("MessageEvent");
  exports["readMessageEvent"] = readMessageEvent;
})(PS["DOM.Websocket.Event.Types"] = PS["DOM.Websocket.Event.Types"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.Websocket.Event.MessageEvent"];
  var DOM_Websocket_Event_Types = PS["DOM.Websocket.Event.Types"];
  var Data_Foreign = PS["Data.Foreign"];
  exports["data_"] = $foreign.data_;
})(PS["DOM.Websocket.Event.MessageEvent"] = PS["DOM.Websocket.Event.MessageEvent"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var DOM_HTML_History = PS["DOM.HTML.History"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var socketToEventTarget = Unsafe_Coerce.unsafeCoerce;
  exports["socketToEventTarget"] = socketToEventTarget;
})(PS["DOM.Websocket.Types"] = PS["DOM.Websocket.Types"] || {});
(function(exports) {
    "use strict";

  exports.create = function (url) {
    return function (protocols) {
      return function () {
        return new WebSocket(url, protocols);
      };
    };
  };

  exports.url = function (ws) {
    return function () {
      return ws.url;
    };
  };

  exports.close = function (ws) {
    return function () {
      return ws.close();
    };
  };

  exports.sendImpl = function (ws) {
    return function (value) {
      return function () {
        ws.send(value);
      };
    };
  };
})(PS["DOM.Websocket.WebSocket"] = PS["DOM.Websocket.WebSocket"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.Websocket.WebSocket"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_File_Types = PS["DOM.File.Types"];
  var DOM_Websocket_BinaryType = PS["DOM.Websocket.BinaryType"];
  var DOM_Websocket_Event_Types = PS["DOM.Websocket.Event.Types"];
  var DOM_Websocket_ReadyState = PS["DOM.Websocket.ReadyState"];
  var DOM_Websocket_Types = PS["DOM.Websocket.Types"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var sendString = function (ws) {
      return function ($10) {
          return $foreign.sendImpl(ws)(Data_Foreign.toForeign($10));
      };
  };
  exports["sendString"] = sendString;
  exports["close"] = $foreign.close;
  exports["create"] = $foreign.create;
})(PS["DOM.Websocket.WebSocket"] = PS["DOM.Websocket.WebSocket"] || {});
(function(exports) {
    "use strict";

  function id(x) {
    return x;
  }                        
  exports.fromNumber = id;
  exports.fromString = id;
  exports.fromArray = id;
  exports.fromObject = id;

  exports.stringify = function (j) {
    return JSON.stringify(j);
  };

  var objToString = Object.prototype.toString;
  var objKeys = Object.keys;

  function isArray(a) {
    return objToString.call(a) === "[object Array]";
  }

  exports._foldJson = function (isNull, isBool, isNum, isStr, isArr, isObj, j) {
    if (j == null) return isNull(null);
    else if (typeof j === "boolean") return isBool(j);
    else if (typeof j === "number") return isNum(j);
    else if (typeof j === "string") return isStr(j);
    else if (objToString.call(j) === "[object Array]")
      return isArr(j);
    else return isObj(j);
  };

  exports._compare = function _compare (EQ, GT, LT, a, b) {
    if (a == null) {
      if (b == null) return EQ;
      else return LT;
    } else if (typeof a === "boolean") {
      if (typeof b === "boolean") {
        // boolean / boolean
        if (a === b) return EQ;
        else if (a === false) return LT;
        else return GT;
      } else if (b == null) return GT;
      else return LT;
    } else if (typeof a === "number") {
      if (typeof b === "number") {
        if (a === b) return EQ;
        else if (a < b) return LT;
        else return GT;
      } else if (b == null) return GT;
      else if (typeof b === "boolean") return GT;
      else return LT;
    } else if (typeof a === "string") {
      if (typeof b === "string") {
        if (a === b) return EQ;
        else if (a < b) return LT;
        else return GT;
      } else if (b == null) return GT;
      else if (typeof b === "boolean") return GT;
      else if (typeof b === "number") return GT;
      else return LT;
    } else if (isArray(a)) {
      if (isArray(b)) {
        for (var i = 0; i < Math.min(a.length, b.length); i++) {
          var ca = _compare(EQ, GT, LT, a[i], b[i]);
          if (ca !== EQ) return ca;
        }
        if (a.length === b.length) return EQ;
        else if (a.length < b.length) return LT;
        else return GT;
      } else if (b == null) return GT;
      else if (typeof b === "boolean") return GT;
      else if (typeof b === "number") return GT;
      else if (typeof b === "string") return GT;
      else return LT;
    } else {
      if (b == null) return GT;
      else if (typeof b === "boolean") return GT;
      else if (typeof b === "number") return GT;
      else if (typeof b === "string") return GT;
      else if (isArray(b)) return GT;
      else {
        var akeys = objKeys(a);
        var bkeys = objKeys(b);
        if (akeys.length < bkeys.length) return LT;
        else if (akeys.length > bkeys.length) return GT;
        var keys = akeys.concat(bkeys).sort();
        for (var j = 0; j < keys.length; j++) {
          var k = keys[j];
          if (a[k] === undefined) return LT;
          else if (b[k] === undefined) return GT;
          var ck = _compare(EQ, GT, LT, a[k], b[k]);
          if (ck !== EQ) return ck;
        }
        return EQ;
      }
    }
  };
})(PS["Data.Argonaut.Core"] = PS["Data.Argonaut.Core"] || {});
(function(exports) {
    "use strict";

  exports._copyEff = function (m) {
    return function () {
      var r = {};
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r[k] = m[k];
        }
      }
      return r;
    };
  };

  exports.empty = {};

  exports.runST = function (f) {
    return f;
  };

  exports._fmapStrMap = function (m0, f) {
    var m = {};
    for (var k in m0) {
      if (hasOwnProperty.call(m0, k)) {
        m[k] = f(m0[k]);
      }
    }
    return m;
  };

  exports._lookup = function (no, yes, k, m) {
    return k in m ? yes(m[k]) : no;
  };

  function toArrayWithKey(f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }
})(PS["Data.StrMap"] = PS["Data.StrMap"] || {});
(function(exports) {
    "use strict";       

  exports.fromFoldableImpl = (function () {
    function Cons(head, tail) {
      this.head = head;
      this.tail = tail;
    }
    var emptyList = {};

    function curryCons(head) {
      return function (tail) {
        return new Cons(head, tail);
      };
    }

    function listToArray(list) {
      var result = [];
      var count = 0;
      var xs = list;
      while (xs !== emptyList) {
        result[count++] = xs.head;
        xs = xs.tail;
      }
      return result;
    }

    return function (foldr) {
      return function (xs) {
        return listToArray(foldr(curryCons)(emptyList)(xs));
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports["uncons'"] = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Array"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = PS["Data.Array.ST.Iterator"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var uncons = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (xs) {
          return new Data_Maybe.Just({
              head: x, 
              tail: xs
          });
      };
  });
  var fromFoldable = function (dictFoldable) {
      return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
  };
  exports["fromFoldable"] = fromFoldable;
  exports["uncons"] = uncons;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  exports["new"] = function () {
    return {};
  };

  exports.poke = function (m) {
    return function (k) {
      return function (v) {
        return function () {
          m[k] = v;
          return m;
        };
      };
    };
  };
})(PS["Data.StrMap.ST"] = PS["Data.StrMap.ST"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.StrMap.ST"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Maybe = PS["Data.Maybe"];
  exports["new"] = $foreign["new"];
  exports["poke"] = $foreign.poke;
})(PS["Data.StrMap.ST"] = PS["Data.StrMap.ST"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.StrMap"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_StrMap_ST = PS["Data.StrMap.ST"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];                                   
  var thawST = $foreign._copyEff;
  var pureST = function (f) {
      return Control_Monad_Eff.runPure($foreign.runST(f));
  };
  var mutate = function (f) {
      return function (m) {
          return pureST(function __do() {
              var v = thawST(m)();
              var v1 = f(v)();
              return v;
          });
      };
  };
  var lookup = Data_Function_Uncurried.runFn4($foreign._lookup)(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var insert = function (k) {
      return function (v) {
          return mutate(function (s) {
              return Data_Functor["void"](Control_Monad_Eff.functorEff)(Data_StrMap_ST.poke(s)(k)(v));
          });
      };
  };
  var functorStrMap = new Data_Functor.Functor(function (f) {
      return function (m) {
          return $foreign._fmapStrMap(m, f);
      };
  });
  var fromFoldable = function (dictFoldable) {
      return function (l) {
          return pureST(function __do() {
              var v = Data_StrMap_ST["new"]();
              Control_Monad_Eff.foreachE(Data_Array.fromFoldable(dictFoldable)(l))(function (v1) {
                  return Data_Functor["void"](Control_Monad_Eff.functorEff)(Data_StrMap_ST.poke(v)(v1.value0)(v1.value1));
              })();
              return v;
          });
      };
  };
  exports["fromFoldable"] = fromFoldable;
  exports["insert"] = insert;
  exports["lookup"] = lookup;
  exports["pureST"] = pureST;
  exports["thawST"] = thawST;
  exports["functorStrMap"] = functorStrMap;
  exports["empty"] = $foreign.empty;
})(PS["Data.StrMap"] = PS["Data.StrMap"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Argonaut.Core"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Show = PS["Data.Show"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var verbJsonType = function (def) {
      return function (f) {
          return function (fold) {
              return fold(def)(f);
          };
      };
  };
  var toJsonType = verbJsonType(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var foldJsonString = function (d) {
      return function (f) {
          return function (j) {
              return $foreign._foldJson(Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), Data_Function["const"](d), j);
          };
      };
  };                                        
  var toString = toJsonType(foldJsonString);
  var foldJsonObject = function (d) {
      return function (f) {
          return function (j) {
              return $foreign._foldJson(Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, j);
          };
      };
  };                                        
  var toObject = toJsonType(foldJsonObject);
  var foldJsonNumber = function (d) {
      return function (f) {
          return function (j) {
              return $foreign._foldJson(Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), j);
          };
      };
  };                                          
  var foldJsonArray = function (d) {
      return function (f) {
          return function (j) {
              return $foreign._foldJson(Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), j);
          };
      };
  };                                      
  var toArray = toJsonType(foldJsonArray);
  var ordJson = new Data_Ord.Ord(function () {
      return eqJson;
  }, function (a) {
      return function (b) {
          return $foreign._compare(Data_Ordering.EQ.value, Data_Ordering.GT.value, Data_Ordering.LT.value, a, b);
      };
  });
  var eqJson = new Data_Eq.Eq(function (j1) {
      return function (j2) {
          return Data_Eq.eq(Data_Ordering.eqOrdering)(Data_Ord.compare(ordJson)(j1)(j2))(Data_Ordering.EQ.value);
      };
  });
  exports["foldJsonArray"] = foldJsonArray;
  exports["foldJsonNumber"] = foldJsonNumber;
  exports["foldJsonObject"] = foldJsonObject;
  exports["foldJsonString"] = foldJsonString;
  exports["toArray"] = toArray;
  exports["toObject"] = toObject;
  exports["toString"] = toString;
  exports["eqJson"] = eqJson;
  exports["ordJson"] = ordJson;
  exports["fromArray"] = $foreign.fromArray;
  exports["fromNumber"] = $foreign.fromNumber;
  exports["fromObject"] = $foreign.fromObject;
  exports["fromString"] = $foreign.fromString;
  exports["stringify"] = $foreign.stringify;
})(PS["Data.Argonaut.Core"] = PS["Data.Argonaut.Core"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Map = PS["Data.Map"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_String = PS["Data.String"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var DecodeJson = function (decodeJson) {
      this.decodeJson = decodeJson;
  }; 
  var decodeJsonString = new DecodeJson(Data_Argonaut_Core.foldJsonString(new Data_Either.Left("Value is not a String"))(Data_Either.Right.create));
  var decodeJsonNumber = new DecodeJson(Data_Argonaut_Core.foldJsonNumber(new Data_Either.Left("Value is not a Number"))(Data_Either.Right.create));   
  var decodeJson = function (dict) {
      return dict.decodeJson;
  }; 
  var decodeJsonInt = new DecodeJson(Control_Bind.composeKleisliFlipped(Data_Either.bindEither)(function ($32) {
      return Data_Maybe.maybe(new Data_Either.Left("Value is not an integer"))(Data_Either.Right.create)(Data_Int.fromNumber($32));
  })(decodeJson(decodeJsonNumber)));
  exports["DecodeJson"] = DecodeJson;
  exports["decodeJson"] = decodeJson;
  exports["decodeJsonNumber"] = decodeJsonNumber;
  exports["decodeJsonInt"] = decodeJsonInt;
  exports["decodeJsonString"] = decodeJsonString;
})(PS["Data.Argonaut.Decode.Class"] = PS["Data.Argonaut.Decode.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Maybe = PS["Data.Maybe"];
  var Product = (function () {
      function Product(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Product.create = function (value0) {
          return function (value1) {
              return new Product(value0, value1);
          };
      };
      return Product;
  })();
  var NoArguments = (function () {
      function NoArguments() {

      };
      NoArguments.value = new NoArguments();
      return NoArguments;
  })();
  var Argument = function (x) {
      return x;
  };
  var Generic = function (from, to) {
      this.from = from;
      this.to = to;
  };
  var to = function (dict) {
      return dict.to;
  }; 
  var from = function (dict) {
      return dict.from;
  };
  exports["Argument"] = Argument;
  exports["NoArguments"] = NoArguments;
  exports["Product"] = Product;
  exports["Generic"] = Generic;
  exports["from"] = from;
  exports["to"] = to;
})(PS["Data.Generic.Rep"] = PS["Data.Generic.Rep"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Semigroup = PS["Data.Semigroup"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var SProxy = (function () {
      function SProxy() {

      };
      SProxy.value = new SProxy();
      return SProxy;
  })();
  var IsSymbol = function (reflectSymbol) {
      this.reflectSymbol = reflectSymbol;
  };
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["SProxy"] = SProxy;
  exports["IsSymbol"] = IsSymbol;
  exports["reflectSymbol"] = reflectSymbol;
})(PS["Data.Symbol"] = PS["Data.Symbol"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Argonaut_Decode_Class = PS["Data.Argonaut.Decode.Class"];
  var Data_Array = PS["Data.Array"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_Symbol = PS["Data.Symbol"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];        
  var DecodeRep = function (decodeRep) {
      this.decodeRep = decodeRep;
  };
  var DecodeRepArgs = function (decodeRepArgs) {
      this.decodeRepArgs = decodeRepArgs;
  };
  var mFail = function (msg) {
      return Data_Maybe.maybe(new Data_Either.Left(msg))(Data_Either.Right.create);
  };
  var decodeRepArgsNoArguments = new DecodeRepArgs(function (js) {
      return new Data_Either.Right({
          init: Data_Generic_Rep.NoArguments.value, 
          rest: js
      });
  });
  var decodeRepArgsArgument = function (dictDecodeJson) {
      return new DecodeRepArgs(function (js) {
          return Control_Bind.bind(Data_Either.bindEither)(mFail("too few values were present")(Data_Array.uncons(js)))(function (v) {
              return Data_Functor.map(Data_Either.functorEither)(function ($64) {
                  return (function (v1) {
                      return {
                          init: v1, 
                          rest: v.tail
                      };
                  })(Data_Generic_Rep.Argument($64));
              })(Data_Argonaut_Decode_Class.decodeJson(dictDecodeJson)(v.head));
          });
      });
  };
  var decodeRepArgs = function (dict) {
      return dict.decodeRepArgs;
  };
  var decodeRepArgsProduct = function (dictDecodeRepArgs) {
      return function (dictDecodeRepArgs1) {
          return new DecodeRepArgs(function (js) {
              return Control_Bind.bind(Data_Either.bindEither)(decodeRepArgs(dictDecodeRepArgs)(js))(function (v) {
                  return Control_Bind.bind(Data_Either.bindEither)(decodeRepArgs(dictDecodeRepArgs1)(v.rest))(function (v1) {
                      return Control_Applicative.pure(Data_Either.applicativeEither)({
                          init: new Data_Generic_Rep.Product(v.init, v1.init), 
                          rest: v1.rest
                      });
                  });
              });
          });
      };
  };
  var decodeRepConstructor = function (dictIsSymbol) {
      return function (dictDecodeRepArgs) {
          return new DecodeRep(function (j) {
              var name = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
              var decodingErr = function (msg) {
                  return "When decoding a " + (name + (": " + msg));
              };
              return Control_Bind.bind(Data_Either.bindEither)(mFail(decodingErr("expected an object"))(Data_Argonaut_Core.toObject(j)))(function (v) {
                  return Control_Bind.bind(Data_Either.bindEither)(mFail(decodingErr("'tag' property is missing"))(Data_StrMap.lookup("tag")(v)))(function (v1) {
                      return Control_Bind.bind(Data_Either.bindEither)(mFail(decodingErr("'tag' property is not a string"))(Data_Argonaut_Core.toString(v1)))(function (v2) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Data_Either.bindEither)(Control_Applicative.when(Data_Either.applicativeEither)(v2 !== name)(Data_Either.Left.create(decodingErr("'tag' property has an incorrect value"))))(function () {
                              return Control_Bind.bind(Data_Either.bindEither)(mFail(decodingErr("'values' property is missing"))(Data_StrMap.lookup("values")(v)))(function (v3) {
                                  return Control_Bind.bind(Data_Either.bindEither)(mFail(decodingErr("'values' property is not an array"))(Data_Argonaut_Core.toArray(v3)))(function (v4) {
                                      return Control_Bind.bind(Data_Either.bindEither)(Data_Bifunctor.lmap(Data_Either.bifunctorEither)(decodingErr)(decodeRepArgs(dictDecodeRepArgs)(v4)))(function (v5) {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Data_Either.bindEither)(Control_Applicative.when(Data_Either.applicativeEither)(Data_Eq.notEq(Data_Eq.eqArray(Data_Argonaut_Core.eqJson))(v5.rest)([  ]))(Data_Either.Left.create(decodingErr("'values' property had too many values"))))(function () {
                                              return Control_Applicative.pure(Data_Either.applicativeEither)(v5.init);
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          });
      };
  };
  var decodeRep = function (dict) {
      return dict.decodeRep;
  };
  var genericDecodeJson = function (dictGeneric) {
      return function (dictDecodeRep) {
          return function ($65) {
              return Data_Functor.map(Data_Either.functorEither)(Data_Generic_Rep.to(dictGeneric))(decodeRep(dictDecodeRep)($65));
          };
      };
  };
  exports["DecodeRep"] = DecodeRep;
  exports["DecodeRepArgs"] = DecodeRepArgs;
  exports["decodeRep"] = decodeRep;
  exports["decodeRepArgs"] = decodeRepArgs;
  exports["genericDecodeJson"] = genericDecodeJson;
  exports["decodeRepConstructor"] = decodeRepConstructor;
  exports["decodeRepArgsNoArguments"] = decodeRepArgsNoArguments;
  exports["decodeRepArgsProduct"] = decodeRepArgsProduct;
  exports["decodeRepArgsArgument"] = decodeRepArgsArgument;
})(PS["Data.Argonaut.Decode.Generic.Rep"] = PS["Data.Argonaut.Decode.Generic.Rep"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Map = PS["Data.Map"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_String = PS["Data.String"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Void = PS["Data.Void"];
  var Prelude = PS["Prelude"];        
  var EncodeJson = function (encodeJson) {
      this.encodeJson = encodeJson;
  };                                                                                    
  var encodeJsonJString = new EncodeJson(Data_Argonaut_Core.fromString);  
  var encodeJsonInt = new EncodeJson(function ($19) {
      return Data_Argonaut_Core.fromNumber(Data_Int.toNumber($19));
  });
  var encodeJson = function (dict) {
      return dict.encodeJson;
  };
  exports["EncodeJson"] = EncodeJson;
  exports["encodeJson"] = encodeJson;
  exports["encodeJsonInt"] = encodeJsonInt;
  exports["encodeJsonJString"] = encodeJsonJString;
})(PS["Data.Argonaut.Encode.Class"] = PS["Data.Argonaut.Encode.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Argonaut_Encode_Class = PS["Data.Argonaut.Encode.Class"];
  var Data_Function = PS["Data.Function"];
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_Symbol = PS["Data.Symbol"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];        
  var EncodeRep = function (encodeRep) {
      this.encodeRep = encodeRep;
  };
  var EncodeRepArgs = function (encodeRepArgs) {
      this.encodeRepArgs = encodeRepArgs;
  };
  var encodeRepArgsNoArguments = new EncodeRepArgs(function (v) {
      return [  ];
  });
  var encodeRepArgsArgument = function (dictEncodeJson) {
      return new EncodeRepArgs(function (v) {
          return [ Data_Argonaut_Encode_Class.encodeJson(dictEncodeJson)(v) ];
      });
  };
  var encodeRepArgs = function (dict) {
      return dict.encodeRepArgs;
  };
  var encodeRepArgsProduct = function (dictEncodeRepArgs) {
      return function (dictEncodeRepArgs1) {
          return new EncodeRepArgs(function (v) {
              return Data_Semigroup.append(Data_Semigroup.semigroupArray)(encodeRepArgs(dictEncodeRepArgs)(v.value0))(encodeRepArgs(dictEncodeRepArgs1)(v.value1));
          });
      };
  };
  var encodeRepConstructor = function (dictIsSymbol) {
      return function (dictEncodeRepArgs) {
          return new EncodeRep(function (v) {
              return Data_Argonaut_Core.fromObject(Data_StrMap.insert("tag")(Data_Argonaut_Core.fromString(Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value)))(Data_StrMap.insert("values")(Data_Argonaut_Core.fromArray(encodeRepArgs(dictEncodeRepArgs)(v)))(Data_StrMap.empty)));
          });
      };
  };
  var encodeRep = function (dict) {
      return dict.encodeRep;
  };
  var genericEncodeJson = function (dictGeneric) {
      return function (dictEncodeRep) {
          return function ($52) {
              return encodeRep(dictEncodeRep)(Data_Generic_Rep.from(dictGeneric)($52));
          };
      };
  };
  exports["EncodeRep"] = EncodeRep;
  exports["EncodeRepArgs"] = EncodeRepArgs;
  exports["encodeRep"] = encodeRep;
  exports["encodeRepArgs"] = encodeRepArgs;
  exports["genericEncodeJson"] = genericEncodeJson;
  exports["encodeRepConstructor"] = encodeRepConstructor;
  exports["encodeRepArgsNoArguments"] = encodeRepArgsNoArguments;
  exports["encodeRepArgsProduct"] = encodeRepArgsProduct;
  exports["encodeRepArgsArgument"] = encodeRepArgsArgument;
})(PS["Data.Argonaut.Encode.Generic.Rep"] = PS["Data.Argonaut.Encode.Generic.Rep"] || {});
(function(exports) {
    "use strict";

  exports._jsonParser = function (fail, succ, s) {
    try {
      return succ(JSON.parse(s));
    }
    catch (e) {
      return fail(e.message);
    }
  };
})(PS["Data.Argonaut.Parser"] = PS["Data.Argonaut.Parser"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Argonaut.Parser"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Either = PS["Data.Either"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];        
  var jsonParser = function (j) {
      return $foreign._jsonParser(Data_Either.Left.create, Data_Either.Right.create, j);
  };
  exports["jsonParser"] = jsonParser;
})(PS["Data.Argonaut.Parser"] = PS["Data.Argonaut.Parser"] || {});
(function(exports) {
    "use strict";

  exports.unsafeGetFn = function(label, rec) {
    return rec[label];
  };

  exports.unsafeDeleteFn = function(label, rec) {
    var copy = {};
    for (var key in rec) {
      if (key !== label && {}.hasOwnProperty.call(rec, key)) {
        copy[key] = rec[key];
      }
    }
    return copy;
  };

  exports.unsafeHasFn = function(label, rec) {
    return {}.hasOwnProperty.call(rec, label);
  };
})(PS["Data.Record.Unsafe"] = PS["Data.Record.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Record.Unsafe"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];         
  var unsafeHas = Data_Function_Uncurried.runFn2($foreign.unsafeHasFn);
  var unsafeGet = Data_Function_Uncurried.runFn2($foreign.unsafeGetFn);
  exports["unsafeGet"] = unsafeGet;
  exports["unsafeHas"] = unsafeHas;
  exports["unsafeDeleteFn"] = $foreign.unsafeDeleteFn;
  exports["unsafeGetFn"] = $foreign.unsafeGetFn;
})(PS["Data.Record.Unsafe"] = PS["Data.Record.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Type_Data_Boolean = PS["Type.Data.Boolean"];
  var Type_Data_Symbol = PS["Type.Data.Symbol"];
  var Type_Equality = PS["Type.Equality"];
  var RLProxy = (function () {
      function RLProxy() {

      };
      RLProxy.value = new RLProxy();
      return RLProxy;
  })();
  var RowLacking = {};
  var RowLacks = {}; 
  var ListToRow = {};
  var rowLacks = function (dictRowCons) {
      return function (dictUnion) {
          return function (dictRowCons1) {
              return function (dictRowLacking) {
                  return RowLacks;
              };
          };
      };
  };
  var rowLacking = RowLacking;
  var listToRowNil = ListToRow;
  var listToRowCons = function (dictListToRow) {
      return function (dictRowCons) {
          return ListToRow;
      };
  };
  exports["RLProxy"] = RLProxy;
  exports["ListToRow"] = ListToRow;
  exports["RowLacking"] = RowLacking;
  exports["RowLacks"] = RowLacks;
  exports["rowLacking"] = rowLacking;
  exports["rowLacks"] = rowLacks;
  exports["listToRowNil"] = listToRowNil;
  exports["listToRowCons"] = listToRowCons;
})(PS["Type.Row"] = PS["Type.Row"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Record_Unsafe = PS["Data.Record.Unsafe"];
  var Data_Symbol = PS["Data.Symbol"];
  var Prelude = PS["Prelude"];
  var Type_Row = PS["Type.Row"];
  var get = function (dictIsSymbol) {
      return function (dictRowCons) {
          return function (l) {
              return function (r) {
                  return Data_Record_Unsafe.unsafeGetFn(Data_Symbol.reflectSymbol(dictIsSymbol)(l), r);
              };
          };
      };
  };
  var $$delete = function (dictIsSymbol) {
      return function (dictRowLacks) {
          return function (dictRowCons) {
              return function (l) {
                  return function (r) {
                      return Data_Record_Unsafe.unsafeDeleteFn(Data_Symbol.reflectSymbol(dictIsSymbol)(l), r);
                  };
              };
          };
      };
  };
  exports["delete"] = $$delete;
  exports["get"] = get;
})(PS["Data.Record"] = PS["Data.Record"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Record = PS["Data.Record"];
  var Data_Show = PS["Data.Show"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];
  var Type_Prelude = PS["Type.Prelude"];
  var Type_Row = PS["Type.Row"];        
  var SLProxy = (function () {
      function SLProxy() {

      };
      SLProxy.value = new SLProxy();
      return SLProxy;
  })();
  var Symbols = function (symbols) {
      this.symbols = symbols;
  };
  var ToHomoRowList = {};
  var RemoveSymbol = {};
  var RecordKV = function (getKVs) {
      this.getKVs = getKVs;
  };
  var toHomoRowNil = ToHomoRowList;
  var toHomoRowCons = function (dictToHomoRowList) {
      return ToHomoRowList;
  };
  var symbols = function (dict) {
      return dict.symbols;
  };
  var removeTail = function (dictRemoveSymbol) {
      return RemoveSymbol;
  };
  var removeHead = RemoveSymbol;
  var recordKVNil = new RecordKV(function (v) {
      return function (v1) {
          return Data_Monoid.mempty(Data_List_Types.monoidList);
      };
  });
  var nilSymbols = new Symbols(function (v) {
      return Data_Monoid.mempty(Data_List_Types.monoidList);
  });
  var getKVs = function (dict) {
      return dict.getKVs;
  };
  var recordKVCons = function (dictIsSymbol) {
      return function (dictShow) {
          return function (dictRecordKV) {
              return function (dictRowLacks) {
                  return function (dictRowCons) {
                      return new RecordKV(function (v) {
                          return function (rec) {
                              var rest = getKVs(dictRecordKV)(Type_Row.RLProxy.value)(Data_Record["delete"](dictIsSymbol)(dictRowLacks)(dictRowCons)(Data_Symbol.SProxy.value)(rec));
                              var val = Data_Record.get(dictIsSymbol)(dictRowCons)(Data_Symbol.SProxy.value)(rec);
                              return new Data_List_Types.Cons(new Data_Tuple.Tuple(Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value), Data_Show.show(dictShow)(val)), rest);
                          };
                      });
                  };
              };
          };
      };
  };
  var consSymbols = function (dictIsSymbol) {
      return function (dictSymbols) {
          return new Symbols(function (v) {
              var rest = symbols(dictSymbols)(SLProxy.value);
              var first = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
              return new Data_List_Types.Cons(first, rest);
          });
      };
  };
  exports["SLProxy"] = SLProxy;
  exports["RecordKV"] = RecordKV;
  exports["RemoveSymbol"] = RemoveSymbol;
  exports["Symbols"] = Symbols;
  exports["ToHomoRowList"] = ToHomoRowList;
  exports["getKVs"] = getKVs;
  exports["symbols"] = symbols;
  exports["nilSymbols"] = nilSymbols;
  exports["consSymbols"] = consSymbols;
  exports["toHomoRowNil"] = toHomoRowNil;
  exports["toHomoRowCons"] = toHomoRowCons;
  exports["removeHead"] = removeHead;
  exports["removeTail"] = removeTail;
  exports["recordKVNil"] = recordKVNil;
  exports["recordKVCons"] = recordKVCons;
})(PS["Scribble.Type.SList"] = PS["Scribble.Type.SList"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Scribble_Type_SList = PS["Scribble.Type.SList"];
  var Type_Row = PS["Type.Row"];        
  var Role = (function () {
      function Role() {

      };
      Role.value = new Role();
      return Role;
  })();
  var Protocol = (function () {
      function Protocol() {

      };
      Protocol.value = new Protocol();
      return Protocol;
  })();
  var ProtocolName = {};
  var RoleName = {};
  var ProtocolRoleNames = {};
  var Initial = {};
  var Terminal = {};
  var Send = {};
  var Receive = {};
  var Branch = {};
  var Select = {};
  exports["Protocol"] = Protocol;
  exports["Role"] = Role;
  exports["Branch"] = Branch;
  exports["Initial"] = Initial;
  exports["ProtocolName"] = ProtocolName;
  exports["ProtocolRoleNames"] = ProtocolRoleNames;
  exports["Receive"] = Receive;
  exports["RoleName"] = RoleName;
  exports["Select"] = Select;
  exports["Send"] = Send;
  exports["Terminal"] = Terminal;
})(PS["Scribble.FSM"] = PS["Scribble.FSM"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];
  var $$Proxy = (function () {
      function $$Proxy() {

      };
      $$Proxy.value = new $$Proxy();
      return $$Proxy;
  })();
  exports["Proxy"] = $$Proxy;
})(PS["Type.Proxy"] = PS["Type.Proxy"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Coroutine = PS["Control.Coroutine"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Aff_AVar = PS["Control.Monad.Aff.AVar"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var DOM = PS["DOM"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Argonaut_Decode = PS["Data.Argonaut.Decode"];
  var Data_Argonaut_Decode_Class = PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Encode = PS["Data.Argonaut.Encode"];
  var Data_Argonaut_Encode_Class = PS["Data.Argonaut.Encode.Class"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Record_Unsafe = PS["Data.Record.Unsafe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_String = PS["Data.String"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Scribble_FSM = PS["Scribble.FSM"];
  var Scribble_Type_SList = PS["Scribble.Type.SList"];
  var Type_Proxy = PS["Type.Proxy"];
  var Type_Row = PS["Type.Row"];
  var Channel = (function () {
      function Channel(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Channel.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Channel(value0, value1, value2);
              };
          };
      };
      return Channel;
  })();
  var Transport = function (uClose, uOpen, uReceive, uSend) {
      this.uClose = uClose;
      this.uOpen = uOpen;
      this.uReceive = uReceive;
      this.uSend = uSend;
  };
  var Functions = {};
  var Elem = {};
  var uSend = function (dict) {
      return dict.uSend;
  };
  var uReceive = function (dict) {
      return dict.uReceive;
  };
  var uOpen = function (dict) {
      return dict.uOpen;
  };
  var uClose = function (dict) {
      return dict.uClose;
  }; 
  var open = function (dictInitial) {
      return function (dictTransport) {
          return function (dictRoleName) {
              return function (dictIsSymbol) {
                  return function (v) {
                      return function (p) {
                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.makeVar(Data_Unit.unit))(function (v1) {
                              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.makeVar(Data_List_Types.Nil.value))(function (v2) {
                                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(uOpen(dictTransport)(p))(function (v3) {
                                      return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(new Channel(v3, v2, v1));
                                  });
                              });
                          });
                      };
                  };
              };
          };
      };
  };
  var identifierShow = new Data_Show.Show(function (v) {
      return v;
  });
  var functionNil = Functions;
  var functionCons = function (dictFunctions) {
      return Functions;
  };
  var encodeReq = function (req) {
      var roles$prime = Data_Argonaut_Core.fromArray(Data_Functor.map(Data_Functor.functorArray)(Data_Argonaut_Core.fromString)(Data_Array.fromFoldable(Data_List_Types.foldableList)(req.protocol.value1)));
      var protocol = Data_Argonaut_Core.fromObject(Data_StrMap.fromFoldable(Data_List_Types.foldableList)(new Data_List_Types.Cons(new Data_Tuple.Tuple("name", Data_Argonaut_Core.fromString(req.protocol.value0)), new Data_List_Types.Cons(new Data_Tuple.Tuple("roles", roles$prime), Data_Monoid.mempty(Data_List_Types.monoidList)))));
      var ass = Data_Argonaut_Core.fromObject(Data_Functor.map(Data_StrMap.functorStrMap)(Data_Argonaut_Core.fromString)(Data_StrMap.fromFoldable(Data_List_Types.foldableList)(req.assignment)));
      return Data_Argonaut_Core.fromObject(Data_StrMap.fromFoldable(Data_List_Types.foldableList)(new Data_List_Types.Cons(new Data_Tuple.Tuple("protocol", protocol), new Data_List_Types.Cons(new Data_Tuple.Tuple("role", Data_Argonaut_Core.fromString(req.role)), new Data_List_Types.Cons(new Data_Tuple.Tuple("assignment", ass), Data_Monoid.mempty(Data_List_Types.monoidList))))));
  };
  var encodeMessage = function (dictRoleName) {
      return function (dictIsSymbol) {
          return function (v) {
              return function (m) {
                  return Data_Argonaut_Core.fromObject(Data_StrMap.fromFoldable(Data_List_Types.foldableList)(new Data_List_Types.Cons(Data_Tuple.Tuple.create("to")(Data_Argonaut_Core.fromString(Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value))), new Data_List_Types.Cons(new Data_Tuple.Tuple("body", m), Data_Monoid.mempty(Data_List_Types.monoidList)))));
              };
          };
      };
  }; 
  var elemTail = function (dictElem) {
      return Elem;
  };
  var elemHead = Elem;
  var close = function (dictTerminal) {
      return function (dictTransport) {
          return function (v) {
              return function (v1) {
                  return uClose(dictTransport)(v1.value0);
              };
          };
      };
  };
  var multiSession = function (dictRoleName) {
      return function (dictIsSymbol) {
          return function (dictProtocolName) {
              return function (dictIsSymbol1) {
                  return function (dictProtocolRoleNames) {
                      return function (dictSymbols) {
                          return function (dictRemoveSymbol) {
                              return function (dictSymbols1) {
                                  return function (dictToHomoRowList) {
                                      return function (dictRecordKV) {
                                          return function (dictListToRow) {
                                              return function (dictInitial) {
                                                  return function (dictTerminal) {
                                                      return function (dictTransport) {
                                                          return function (v) {
                                                              return function (params) {
                                                                  return function (v1) {
                                                                      return function (v2) {
                                                                          return function (ass) {
                                                                              return function (prog) {
                                                                                  var role = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                                                                                  var proxyReq = {
                                                                                      protocol: new Data_Tuple.Tuple(Data_Symbol.reflectSymbol(dictIsSymbol1)(Data_Symbol.SProxy.value), Scribble_Type_SList.symbols(dictSymbols)(Scribble_Type_SList.SLProxy.value)), 
                                                                                      role: role, 
                                                                                      assignment: new Data_List_Types.Cons(new Data_Tuple.Tuple(role, Data_Show.show(identifierShow)(v2.value1)), Scribble_Type_SList.getKVs(dictRecordKV)(Type_Row.RLProxy.value)(ass))
                                                                                  };
                                                                                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(open(dictInitial)(dictTransport)(dictRoleName)(dictIsSymbol)(v2.value0)(params))(function (v3) {
                                                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(uSend(dictTransport)(v3.value0)(encodeReq(proxyReq)))(function () {
                                                                                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(uReceive(dictTransport)(v3.value0))(function (v4) {
                                                                                              return Control_Bind.bind(Control_Monad_Aff.bindAff)(prog(v3))(function (v5) {
                                                                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(uSend(dictTransport)(v3.value0)(Data_Argonaut_Core.fromString("close")))(function () {
                                                                                                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(uReceive(dictTransport)(v3.value0))(function (v6) {
                                                                                                          return close(dictTerminal)(dictTransport)(v2.value0)(v5);
                                                                                                      });
                                                                                                  });
                                                                                              });
                                                                                          });
                                                                                      });
                                                                                  });
                                                                              };
                                                                          };
                                                                      };
                                                                  };
                                                              };
                                                          };
                                                      };
                                                  };
                                              };
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var checkLinearity = function (v) {
      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.tryTakeVar(v.value2))(function (v2) {
          if (v2 instanceof Data_Maybe.Just) {
              return Data_Functor.map(Control_Monad_Aff.functorAff)(Channel.create(v.value0)(v.value1))(Control_Monad_Aff_AVar.makeVar(Data_Unit.unit));
          };
          return Control_Monad_Error_Class.throwError(Control_Monad_Aff.monadThrowAff)(Control_Monad_Eff_Exception.error("Linearity exception"));
      });
  };
  var choice = function (dictBranch) {
      return function (dictTerminal) {
          return function (dictTransport) {
              return function (dictFunctions) {
                  return function (dictListToRow) {
                      return function (v) {
                          return function (row) {
                              return Control_Bind.bind(Control_Monad_Aff.bindAff)(checkLinearity(v))(function (v1) {
                                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(uReceive(dictTransport)(v.value0))(function (v2) {
                                      var lab = Control_Bind.bind(Data_Maybe.bindMaybe)(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Argonaut_Core.toObject(v2))(Data_StrMap.lookup("tag")))(Data_Argonaut_Core.toString);
                                      var lab$prime = Data_Functor.map(Data_Maybe.functorMaybe)(Data_String.toLower)(lab);
                                      if (lab$prime instanceof Data_Maybe.Nothing) {
                                          return Control_Monad_Error_Class.throwError(Control_Monad_Aff.monadThrowAff)(Control_Monad_Eff_Exception.error("Unable to parse tag of message in branch"));
                                      };
                                      if (lab$prime instanceof Data_Maybe.Just) {
                                          var $163 = Data_Record_Unsafe.unsafeHas(lab$prime.value0)(row);
                                          if ($163) {
                                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.takeVar(v.value1))(function (vs) {
                                                  return Control_Monad_Aff_AVar.putVar(new Data_List_Types.Cons(v2, vs))(v.value1);
                                              }))(function () {
                                                  return Data_Record_Unsafe.unsafeGet(lab$prime.value0)(row)(v1);
                                              });
                                          };
                                          return Control_Monad_Error_Class.throwError(Control_Monad_Aff.monadThrowAff)(Control_Monad_Eff_Exception.error("Branch chosen `" + (lab$prime.value0 + "`  is not supported")));
                                      };
                                      throw new Error("Failed pattern match at Scribble.Core line 272, column 3 - line 279, column 81: " + [ lab$prime.constructor.name ]);
                                  });
                              });
                          };
                      };
                  };
              };
          };
      };
  };
  var receive = function (dictReceive) {
      return function (dictTransport) {
          return function (dictDecodeJson) {
              return function (v) {
                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(checkLinearity(v))(function (v1) {
                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.takeVar(v.value1))(function (v2) {
                          return Control_Bind.bind(Control_Monad_Aff.bindAff)((function () {
                              if (v2 instanceof Data_List_Types.Nil) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.putVar(Data_List_Types.Nil.value)(v.value1))(function () {
                                      return uReceive(dictTransport)(v.value0);
                                  });
                              };
                              if (v2 instanceof Data_List_Types.Cons) {
                                  return Control_Apply.applySecond(Control_Monad_Aff.applyAff)(Control_Monad_Aff_AVar.putVar(v2.value1)(v.value1))(Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v2.value0));
                              };
                              throw new Error("Failed pattern match at Scribble.Core line 147, column 8 - line 151, column 44: " + [ v2.constructor.name ]);
                          })())(function (v3) {
                              var v4 = Data_Argonaut_Decode_Class.decodeJson(dictDecodeJson)(v3);
                              if (v4 instanceof Data_Either.Left) {
                                  return Control_Monad_Error_Class.throwError(Control_Monad_Aff.monadThrowAff)(Control_Monad_Eff_Exception.error(v4.value0));
                              };
                              if (v4 instanceof Data_Either.Right) {
                                  return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(new Data_Tuple.Tuple(v4.value0, v1));
                              };
                              throw new Error("Failed pattern match at Scribble.Core line 152, column 3 - line 154, column 34: " + [ v4.constructor.name ]);
                          });
                      });
                  });
              };
          };
      };
  };
  var select = function (dictSelect) {
      return function (dictRoleName) {
          return function (dictIsSymbol) {
              return function (dictTransport) {
                  return function (dictElem) {
                      return function (dictIsSymbol1) {
                          return function (v) {
                              return function (l) {
                                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(checkLinearity(v))(function (v1) {
                                      return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v1);
                                  });
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var send = function (dictSend) {
      return function (dictRoleName) {
          return function (dictIsSymbol) {
              return function (dictTransport) {
                  return function (dictEncodeJson) {
                      return function (v) {
                          return function (x) {
                              return Control_Bind.bind(Control_Monad_Aff.bindAff)(checkLinearity(v))(function (v1) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(uSend(dictTransport)(v.value0)(encodeMessage(dictRoleName)(dictIsSymbol)(Scribble_FSM.Role.value)(Data_Argonaut_Encode_Class.encodeJson(dictEncodeJson)(x))))(function () {
                                      return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v1);
                                  });
                              });
                          };
                      };
                  };
              };
          };
      };
  };
  exports["Channel"] = Channel;
  exports["Elem"] = Elem;
  exports["Functions"] = Functions;
  exports["Transport"] = Transport;
  exports["checkLinearity"] = checkLinearity;
  exports["choice"] = choice;
  exports["close"] = close;
  exports["encodeMessage"] = encodeMessage;
  exports["encodeReq"] = encodeReq;
  exports["multiSession"] = multiSession;
  exports["open"] = open;
  exports["receive"] = receive;
  exports["select"] = select;
  exports["send"] = send;
  exports["uClose"] = uClose;
  exports["uOpen"] = uOpen;
  exports["uReceive"] = uReceive;
  exports["uSend"] = uSend;
  exports["identifierShow"] = identifierShow;
  exports["functionNil"] = functionNil;
  exports["functionCons"] = functionCons;
  exports["elemHead"] = elemHead;
  exports["elemTail"] = elemTail;
})(PS["Scribble.Core"] = PS["Scribble.Core"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Coroutine = PS["Control.Coroutine"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Aff_AVar = PS["Control.Monad.Aff.AVar"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var DOM = PS["DOM"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Argonaut_Decode = PS["Data.Argonaut.Decode"];
  var Data_Argonaut_Decode_Class = PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Encode = PS["Data.Argonaut.Encode"];
  var Data_Argonaut_Encode_Class = PS["Data.Argonaut.Encode.Class"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Record_Unsafe = PS["Data.Record.Unsafe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_String = PS["Data.String"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Scribble_Core = PS["Scribble.Core"];
  var Scribble_FSM = PS["Scribble.FSM"];
  var Scribble_Type_SList = PS["Scribble.Type.SList"];
  var Type_Proxy = PS["Type.Proxy"];
  var Type_Row = PS["Type.Row"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Channel = (function () {
      function Channel(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Channel.create = function (value0) {
          return function (value1) {
              return new Channel(value0, value1);
          };
      };
      return Channel;
  })();
  var IxMonad = function (ibind, ipure) {
      this.ibind = ibind;
      this.ipure = ipure;
  };
  var Functions = {};
  var sessionIxMonad = new IxMonad(function (v) {
      return function (f) {
          return function (c) {
              return Control_Bind.bind(Control_Monad_Aff.bindAff)(v(c))(function (v1) {
                  var v2 = f(v1.value1);
                  return v2(v1.value0);
              });
          };
      };
  }, function (x) {
      return function (c) {
          return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(new Data_Tuple.Tuple(c, x));
      };
  });
  var receive = function (dictReceive) {
      return function (dictTransport) {
          return function (dictDecodeJson) {
              return function (v) {
                  return Data_Functor.map(Control_Monad_Aff.functorAff)(Data_Tuple.Tuple.create(Unsafe_Coerce.unsafeCoerce(v)))(Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.takeVar(v.value1))(function (v1) {
                      return Control_Bind.bind(Control_Monad_Aff.bindAff)((function () {
                          if (v1 instanceof Data_List_Types.Nil) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.putVar(Data_List_Types.Nil.value)(v.value1))(function () {
                                  return Scribble_Core.uReceive(dictTransport)(v.value0);
                              });
                          };
                          if (v1 instanceof Data_List_Types.Cons) {
                              return Control_Apply.applySecond(Control_Monad_Aff.applyAff)(Control_Monad_Aff_AVar.putVar(v1.value1)(v.value1))(Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v1.value0));
                          };
                          throw new Error("Failed pattern match at Scribble.Indexed line 130, column 10 - line 134, column 46: " + [ v1.constructor.name ]);
                      })())(function (v2) {
                          var v3 = Data_Argonaut_Decode_Class.decodeJson(dictDecodeJson)(v2);
                          if (v3 instanceof Data_Either.Left) {
                              return Control_Monad_Error_Class.throwError(Control_Monad_Aff.monadThrowAff)(Control_Monad_Eff_Exception.error(v3.value0));
                          };
                          if (v3 instanceof Data_Either.Right) {
                              return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v3.value0);
                          };
                          throw new Error("Failed pattern match at Scribble.Indexed line 135, column 5 - line 137, column 24: " + [ v3.constructor.name ]);
                      });
                  }));
              };
          };
      };
  };
  var open = function (dictInitial) {
      return function (dictTransport) {
          return function (dictRoleName) {
              return function (dictIsSymbol) {
                  return function (v) {
                      return function (p) {
                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.makeVar(Data_List_Types.Nil.value))(function (v1) {
                              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Scribble_Core.uOpen(dictTransport)(p))(function (v2) {
                                  return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(new Channel(v2, v1));
                              });
                          });
                      };
                  };
              };
          };
      };
  };
  var ipure = function (dict) {
      return dict.ipure;
  };
  var identifierShow = new Data_Show.Show(function (v) {
      return v;
  });
  var ibind = function (dict) {
      return dict.ibind;
  };
  var functionNil = Functions;
  var functionCons = function (dictFunctions) {
      return Functions;
  };
  var encodeReq = function (req) {
      var roles$prime = Data_Argonaut_Core.fromArray(Data_Functor.map(Data_Functor.functorArray)(Data_Argonaut_Core.fromString)(Data_Array.fromFoldable(Data_List_Types.foldableList)(req.protocol.value1)));
      var protocol = Data_Argonaut_Core.fromObject(Data_StrMap.fromFoldable(Data_List_Types.foldableList)(new Data_List_Types.Cons(new Data_Tuple.Tuple("name", Data_Argonaut_Core.fromString(req.protocol.value0)), new Data_List_Types.Cons(new Data_Tuple.Tuple("roles", roles$prime), Data_Monoid.mempty(Data_List_Types.monoidList)))));
      var ass = Data_Argonaut_Core.fromObject(Data_Functor.map(Data_StrMap.functorStrMap)(Data_Argonaut_Core.fromString)(Data_StrMap.fromFoldable(Data_List_Types.foldableList)(req.assignment)));
      return Data_Argonaut_Core.fromObject(Data_StrMap.fromFoldable(Data_List_Types.foldableList)(new Data_List_Types.Cons(new Data_Tuple.Tuple("protocol", protocol), new Data_List_Types.Cons(new Data_Tuple.Tuple("role", Data_Argonaut_Core.fromString(req.role)), new Data_List_Types.Cons(new Data_Tuple.Tuple("assignment", ass), Data_Monoid.mempty(Data_List_Types.monoidList))))));
  };
  var encodeMessage = function (dictRoleName) {
      return function (dictIsSymbol) {
          return function (v) {
              return function (m) {
                  return Data_Argonaut_Core.fromObject(Data_StrMap.fromFoldable(Data_List_Types.foldableList)(new Data_List_Types.Cons(Data_Tuple.Tuple.create("to")(Data_Argonaut_Core.fromString(Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value))), new Data_List_Types.Cons(new Data_Tuple.Tuple("body", m), Data_Monoid.mempty(Data_List_Types.monoidList)))));
              };
          };
      };
  };
  var send = function (dictSend) {
      return function (dictRoleName) {
          return function (dictIsSymbol) {
              return function (dictTransport) {
                  return function (dictEncodeJson) {
                      return function (x) {
                          return function (v) {
                              return Data_Functor.map(Control_Monad_Aff.functorAff)(Data_Tuple.Tuple.create(Unsafe_Coerce.unsafeCoerce(v)))(Scribble_Core.uSend(dictTransport)(v.value0)(encodeMessage(dictRoleName)(dictIsSymbol)(Scribble_FSM.Role.value)(Data_Argonaut_Encode_Class.encodeJson(dictEncodeJson)(x))));
                          };
                      };
                  };
              };
          };
      };
  }; 
  var close = function (dictTerminal) {
      return function (dictTransport) {
          return function (v) {
              return function (v1) {
                  return Scribble_Core.uClose(dictTransport)(v1.value0);
              };
          };
      };
  };
  var multiSession = function (dictRoleName) {
      return function (dictIsSymbol) {
          return function (dictProtocolName) {
              return function (dictIsSymbol1) {
                  return function (dictProtocolRoleNames) {
                      return function (dictSymbols) {
                          return function (dictRemoveSymbol) {
                              return function (dictSymbols1) {
                                  return function (dictToHomoRowList) {
                                      return function (dictRecordKV) {
                                          return function (dictListToRow) {
                                              return function (dictInitial) {
                                                  return function (dictTerminal) {
                                                      return function (dictTransport) {
                                                          return function (v) {
                                                              return function (params) {
                                                                  return function (v1) {
                                                                      return function (v2) {
                                                                          return function (ass) {
                                                                              return function (v3) {
                                                                                  var role = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                                                                                  var proxyReq = {
                                                                                      protocol: new Data_Tuple.Tuple(Data_Symbol.reflectSymbol(dictIsSymbol1)(Data_Symbol.SProxy.value), Scribble_Type_SList.symbols(dictSymbols)(Scribble_Type_SList.SLProxy.value)), 
                                                                                      role: role, 
                                                                                      assignment: new Data_List_Types.Cons(new Data_Tuple.Tuple(role, Data_Show.show(identifierShow)(v2.value1)), Scribble_Type_SList.getKVs(dictRecordKV)(Type_Row.RLProxy.value)(ass))
                                                                                  };
                                                                                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(open(dictInitial)(dictTransport)(dictRoleName)(dictIsSymbol)(v2.value0)(params))(function (v4) {
                                                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Scribble_Core.uSend(dictTransport)(v4.value0)(encodeReq(proxyReq)))(function () {
                                                                                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Scribble_Core.uReceive(dictTransport)(v4.value0))(function (v5) {
                                                                                              return Control_Bind.bind(Control_Monad_Aff.bindAff)(v3(v4))(function (v6) {
                                                                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Scribble_Core.uSend(dictTransport)(v4.value0)(Data_Argonaut_Core.fromString("close")))(function () {
                                                                                                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Scribble_Core.uReceive(dictTransport)(v4.value0))(function (v7) {
                                                                                                          return close(dictTerminal)(dictTransport)(v2.value0)(v6.value0);
                                                                                                      });
                                                                                                  });
                                                                                              });
                                                                                          });
                                                                                      });
                                                                                  });
                                                                              };
                                                                          };
                                                                      };
                                                                  };
                                                              };
                                                          };
                                                      };
                                                  };
                                              };
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var choice = function (dictBranch) {
      return function (dictTerminal) {
          return function (dictTransport) {
              return function (dictFunctions) {
                  return function (dictListToRow) {
                      return function (row) {
                          return function (v) {
                              return Data_Functor.map(Control_Monad_Aff.functorAff)(Data_Tuple.Tuple.create(Unsafe_Coerce.unsafeCoerce(v)))(Control_Bind.bind(Control_Monad_Aff.bindAff)(Scribble_Core.uReceive(dictTransport)(v.value0))(function (v1) {
                                  var lab = Control_Bind.bind(Data_Maybe.bindMaybe)(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Argonaut_Core.toObject(v1))(Data_StrMap.lookup("tag")))(Data_Argonaut_Core.toString);
                                  var lab$prime = Data_Functor.map(Data_Maybe.functorMaybe)(Data_String.toLower)(lab);
                                  if (lab$prime instanceof Data_Maybe.Nothing) {
                                      return Control_Monad_Error_Class.throwError(Control_Monad_Aff.monadThrowAff)(Control_Monad_Eff_Exception.error("Unable to parse tag of message in branch"));
                                  };
                                  if (lab$prime instanceof Data_Maybe.Just) {
                                      var $168 = Data_Record_Unsafe.unsafeHas(lab$prime.value0)(row);
                                      if ($168) {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.takeVar(v.value1))(function (vs) {
                                              return Control_Monad_Aff_AVar.putVar(new Data_List_Types.Cons(v1, vs))(v.value1);
                                          }))(function () {
                                              return Data_Record_Unsafe.unsafeGet(lab$prime.value0)(row)(v);
                                          });
                                      };
                                      return Control_Monad_Error_Class.throwError(Control_Monad_Aff.monadThrowAff)(Control_Monad_Eff_Exception.error("Branch chosen `" + (lab$prime.value0 + "`  is not supported")));
                                  };
                                  throw new Error("Failed pattern match at Scribble.Indexed line 174, column 4 - line 181, column 82: " + [ lab$prime.constructor.name ]);
                              }));
                          };
                      };
                  };
              };
          };
      };
  };
  var aff = function (a) {
      return function (c) {
          return Data_Functor.map(Control_Monad_Aff.functorAff)(Data_Tuple.Tuple.create(c))(a);
      };
  };
  exports["Channel"] = Channel;
  exports["Functions"] = Functions;
  exports["IxMonad"] = IxMonad;
  exports["aff"] = aff;
  exports["choice"] = choice;
  exports["close"] = close;
  exports["encodeMessage"] = encodeMessage;
  exports["encodeReq"] = encodeReq;
  exports["ibind"] = ibind;
  exports["ipure"] = ipure;
  exports["multiSession"] = multiSession;
  exports["open"] = open;
  exports["receive"] = receive;
  exports["send"] = send;
  exports["sessionIxMonad"] = sessionIxMonad;
  exports["functionNil"] = functionNil;
  exports["functionCons"] = functionCons;
  exports["identifierShow"] = identifierShow;
})(PS["Scribble.Indexed"] = PS["Scribble.Indexed"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Argonaut_Decode = PS["Data.Argonaut.Decode"];
  var Data_Argonaut_Decode_Class = PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Decode_Generic_Rep = PS["Data.Argonaut.Decode.Generic.Rep"];
  var Data_Argonaut_Encode = PS["Data.Argonaut.Encode"];
  var Data_Argonaut_Encode_Class = PS["Data.Argonaut.Encode.Class"];
  var Data_Argonaut_Encode_Generic_Rep = PS["Data.Argonaut.Encode.Generic.Rep"];
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Void = PS["Data.Void"];
  var Scribble_FSM = PS["Scribble.FSM"];
  var Scribble_Type_SList = PS["Scribble.Type.SList"];
  var Type_Row = PS["Type.Row"];        
  var Sum = (function () {
      function Sum(value0) {
          this.value0 = value0;
      };
      Sum.create = function (value0) {
          return new Sum(value0);
      };
      return Sum;
  })();
  var Quit = (function () {
      function Quit() {

      };
      Quit.value = new Quit();
      return Quit;
  })();
  var Product = (function () {
      function Product(value0) {
          this.value0 = value0;
      };
      Product.create = function (value0) {
          return new Product(value0);
      };
      return Product;
  })();
  var Multiply = (function () {
      function Multiply(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Multiply.create = function (value0) {
          return function (value1) {
              return new Multiply(value0, value1);
          };
      };
      return Multiply;
  })();
  var Add = (function () {
      function Add(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Add.create = function (value0) {
          return function (value1) {
              return new Add(value0, value1);
          };
      };
      return Add;
  })();
  var terminalServer = Scribble_FSM.Terminal;
  var terminalClient = Scribble_FSM.Terminal;
  var sendS9Quit = Scribble_FSM.Send;    
  var sendS9Add = Scribble_FSM.Send;
  var sendS23 = Scribble_FSM.Send;
  var sendS22 = Scribble_FSM.Send;
  var selectS9 = Scribble_FSM.Select;
  var roleNameServer = Scribble_FSM.RoleName;
  var roleNameClient = Scribble_FSM.RoleName;
  var receiveS20Quit = Scribble_FSM.Receive;
  var receiveS20Multiply = Scribble_FSM.Receive;
  var receiveS20Add = Scribble_FSM.Receive;
  var receiveS11 = Scribble_FSM.Receive;
  var protocolRoleNamesMathServer = Scribble_FSM.ProtocolRoleNames;
  var protocolNameMathServer = Scribble_FSM.ProtocolName;
  var initialServer = Scribble_FSM.Initial;
  var initialClient = Scribble_FSM.Initial;
  var genericSum = new Data_Generic_Rep.Generic(function (x) {
      return x.value0;
  }, function (x) {
      return new Sum(x);
  });
  var genericQuit = new Data_Generic_Rep.Generic(function (x) {
      return Data_Generic_Rep.NoArguments.value;
  }, function (x) {
      return Quit.value;
  });
  var genericProduct = new Data_Generic_Rep.Generic(function (x) {
      return x.value0;
  }, function (x) {
      return new Product(x);
  });
  var genericMultiply = new Data_Generic_Rep.Generic(function (x) {
      return new Data_Generic_Rep.Product(x.value0, x.value1);
  }, function (x) {
      return new Multiply(x.value0, x.value1);
  });
  var genericAdd = new Data_Generic_Rep.Generic(function (x) {
      return new Data_Generic_Rep.Product(x.value0, x.value1);
  }, function (x) {
      return new Add(x.value0, x.value1);
  });
  var encodeJsonSum = new Data_Argonaut_Encode_Class.EncodeJson(Data_Argonaut_Encode_Generic_Rep.genericEncodeJson(genericSum)(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Sum";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsArgument(Data_Argonaut_Encode_Class.encodeJsonInt))));
  var encodeJsonQuit = new Data_Argonaut_Encode_Class.EncodeJson(Data_Argonaut_Encode_Generic_Rep.genericEncodeJson(genericQuit)(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Quit";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsNoArguments)));
  var encodeJsonProduct = new Data_Argonaut_Encode_Class.EncodeJson(Data_Argonaut_Encode_Generic_Rep.genericEncodeJson(genericProduct)(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Product";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsArgument(Data_Argonaut_Encode_Class.encodeJsonInt))));                                                                                                                                                         
  var encodeJsonAdd = new Data_Argonaut_Encode_Class.EncodeJson(Data_Argonaut_Encode_Generic_Rep.genericEncodeJson(genericAdd)(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Add";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsProduct(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsArgument(Data_Argonaut_Encode_Class.encodeJsonInt))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsArgument(Data_Argonaut_Encode_Class.encodeJsonInt)))));
  var decodeJsonSum = new Data_Argonaut_Decode_Class.DecodeJson(Data_Argonaut_Decode_Generic_Rep.genericDecodeJson(genericSum)(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Sum";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsArgument(Data_Argonaut_Decode_Class.decodeJsonInt))));
  var decodeJsonQuit = new Data_Argonaut_Decode_Class.DecodeJson(Data_Argonaut_Decode_Generic_Rep.genericDecodeJson(genericQuit)(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Quit";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsNoArguments)));                                       
  var decodeJsonMultiply = new Data_Argonaut_Decode_Class.DecodeJson(Data_Argonaut_Decode_Generic_Rep.genericDecodeJson(genericMultiply)(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Multiply";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsProduct(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsArgument(Data_Argonaut_Decode_Class.decodeJsonInt))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsArgument(Data_Argonaut_Decode_Class.decodeJsonInt)))));
  var decodeJsonAdd = new Data_Argonaut_Decode_Class.DecodeJson(Data_Argonaut_Decode_Generic_Rep.genericDecodeJson(genericAdd)(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Add";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsProduct(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsArgument(Data_Argonaut_Decode_Class.decodeJsonInt))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsArgument(Data_Argonaut_Decode_Class.decodeJsonInt)))));
  var branchS20 = Scribble_FSM.Branch;
  exports["Add"] = Add;
  exports["Multiply"] = Multiply;
  exports["Product"] = Product;
  exports["Quit"] = Quit;
  exports["Sum"] = Sum;
  exports["genericAdd"] = genericAdd;
  exports["encodeJsonAdd"] = encodeJsonAdd;
  exports["decodeJsonAdd"] = decodeJsonAdd;
  exports["genericMultiply"] = genericMultiply;
  exports["decodeJsonMultiply"] = decodeJsonMultiply;
  exports["genericQuit"] = genericQuit;
  exports["encodeJsonQuit"] = encodeJsonQuit;
  exports["decodeJsonQuit"] = decodeJsonQuit;
  exports["genericProduct"] = genericProduct;
  exports["encodeJsonProduct"] = encodeJsonProduct;
  exports["genericSum"] = genericSum;
  exports["encodeJsonSum"] = encodeJsonSum;
  exports["decodeJsonSum"] = decodeJsonSum;
  exports["protocolNameMathServer"] = protocolNameMathServer;
  exports["protocolRoleNamesMathServer"] = protocolRoleNamesMathServer;
  exports["roleNameClient"] = roleNameClient;
  exports["initialClient"] = initialClient;
  exports["terminalClient"] = terminalClient;
  exports["sendS9Add"] = sendS9Add;
  exports["sendS9Quit"] = sendS9Quit;
  exports["selectS9"] = selectS9;
  exports["receiveS11"] = receiveS11;
  exports["roleNameServer"] = roleNameServer;
  exports["initialServer"] = initialServer;
  exports["terminalServer"] = terminalServer;
  exports["receiveS20Add"] = receiveS20Add;
  exports["receiveS20Multiply"] = receiveS20Multiply;
  exports["receiveS20Quit"] = receiveS20Quit;
  exports["branchS20"] = branchS20;
  exports["sendS22"] = sendS22;
  exports["sendS23"] = sendS23;
})(PS["Scribble.Protocol.Arithmetic.MathServer"] = PS["Scribble.Protocol.Arithmetic.MathServer"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Argonaut_Decode = PS["Data.Argonaut.Decode"];
  var Data_Argonaut_Decode_Class = PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Decode_Generic_Rep = PS["Data.Argonaut.Decode.Generic.Rep"];
  var Data_Argonaut_Encode = PS["Data.Argonaut.Encode"];
  var Data_Argonaut_Encode_Class = PS["Data.Argonaut.Encode.Class"];
  var Data_Argonaut_Encode_Generic_Rep = PS["Data.Argonaut.Encode.Generic.Rep"];
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Void = PS["Data.Void"];
  var Scribble_FSM = PS["Scribble.FSM"];
  var Scribble_Type_SList = PS["Scribble.Type.SList"];
  var Type_Row = PS["Type.Row"];        
  var Transfer = (function () {
      function Transfer(value0) {
          this.value0 = value0;
      };
      Transfer.create = function (value0) {
          return new Transfer(value0);
      };
      return Transfer;
  })();
  var Quote = (function () {
      function Quote(value0) {
          this.value0 = value0;
      };
      Quote.create = function (value0) {
          return new Quote(value0);
      };
      return Quote;
  })();
  var Quit = (function () {
      function Quit() {

      };
      Quit.value = new Quit();
      return Quit;
  })();
  var Contribution = (function () {
      function Contribution(value0) {
          this.value0 = value0;
      };
      Contribution.create = function (value0) {
          return new Contribution(value0);
      };
      return Contribution;
  })();
  var Book = (function () {
      function Book(value0) {
          this.value0 = value0;
      };
      Book.create = function (value0) {
          return new Book(value0);
      };
      return Book;
  })();
  var Agree = (function () {
      function Agree() {

      };
      Agree.value = new Agree();
      return Agree;
  })();
  var terminalSeller = Scribble_FSM.Terminal;
  var terminalBuyer2 = Scribble_FSM.Terminal;
  var terminalBuyer1 = Scribble_FSM.Terminal;
  var sendS9 = Scribble_FSM.Send;
  var sendS41 = Scribble_FSM.Send;
  var sendS40 = Scribble_FSM.Send;
  var sendS29 = Scribble_FSM.Send;
  var sendS28 = Scribble_FSM.Send;
  var sendS27 = Scribble_FSM.Send;
  var sendS26Quit = Scribble_FSM.Send;
  var sendS26Agree = Scribble_FSM.Send;
  var sendS14 = Scribble_FSM.Send;
  var sendS12 = Scribble_FSM.Send;
  var selectS26 = Scribble_FSM.Select;
  var roleNameSeller = Scribble_FSM.RoleName;
  var roleNameBuyer2 = Scribble_FSM.RoleName;
  var roleNameBuyer1 = Scribble_FSM.RoleName;
  var receiveS44 = Scribble_FSM.Receive;
  var receiveS43 = Scribble_FSM.Receive;
  var receiveS42Quit = Scribble_FSM.Receive;
  var receiveS42Agree = Scribble_FSM.Receive;
  var receiveS38 = Scribble_FSM.Receive;
  var receiveS25 = Scribble_FSM.Receive;
  var receiveS23 = Scribble_FSM.Receive;
  var receiveS13Quit = Scribble_FSM.Receive;
  var receiveS13Agree = Scribble_FSM.Receive;
  var receiveS11 = Scribble_FSM.Receive;
  var protocolRoleNamesTwoBuyer = Scribble_FSM.ProtocolRoleNames;
  var protocolNameTwoBuyer = Scribble_FSM.ProtocolName;
  var initialSeller = Scribble_FSM.Initial;
  var initialBuyer2 = Scribble_FSM.Initial;
  var initialBuyer1 = Scribble_FSM.Initial;
  var genericTransfer = new Data_Generic_Rep.Generic(function (x) {
      return x.value0;
  }, function (x) {
      return new Transfer(x);
  });
  var genericQuote = new Data_Generic_Rep.Generic(function (x) {
      return x.value0;
  }, function (x) {
      return new Quote(x);
  });
  var genericQuit = new Data_Generic_Rep.Generic(function (x) {
      return Data_Generic_Rep.NoArguments.value;
  }, function (x) {
      return Quit.value;
  });
  var genericContribution = new Data_Generic_Rep.Generic(function (x) {
      return x.value0;
  }, function (x) {
      return new Contribution(x);
  });
  var genericBook = new Data_Generic_Rep.Generic(function (x) {
      return x.value0;
  }, function (x) {
      return new Book(x);
  });
  var genericAgree = new Data_Generic_Rep.Generic(function (x) {
      return Data_Generic_Rep.NoArguments.value;
  }, function (x) {
      return Agree.value;
  });
  var encodeJsonTransfer = new Data_Argonaut_Encode_Class.EncodeJson(Data_Argonaut_Encode_Generic_Rep.genericEncodeJson(genericTransfer)(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Transfer";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsArgument(Data_Argonaut_Encode_Class.encodeJsonInt))));
  var encodeJsonQuote = new Data_Argonaut_Encode_Class.EncodeJson(Data_Argonaut_Encode_Generic_Rep.genericEncodeJson(genericQuote)(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Quote";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsArgument(Data_Argonaut_Encode_Class.encodeJsonInt))));
  var encodeJsonQuit = new Data_Argonaut_Encode_Class.EncodeJson(Data_Argonaut_Encode_Generic_Rep.genericEncodeJson(genericQuit)(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Quit";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsNoArguments)));
  var encodeJsonContribution = new Data_Argonaut_Encode_Class.EncodeJson(Data_Argonaut_Encode_Generic_Rep.genericEncodeJson(genericContribution)(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Contribution";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsArgument(Data_Argonaut_Encode_Class.encodeJsonInt))));
  var encodeJsonBook = new Data_Argonaut_Encode_Class.EncodeJson(Data_Argonaut_Encode_Generic_Rep.genericEncodeJson(genericBook)(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Book";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsArgument(Data_Argonaut_Encode_Class.encodeJsonJString))));
  var encodeJsonAgree = new Data_Argonaut_Encode_Class.EncodeJson(Data_Argonaut_Encode_Generic_Rep.genericEncodeJson(genericAgree)(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Agree";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsNoArguments)));
  var decodeJsonTransfer = new Data_Argonaut_Decode_Class.DecodeJson(Data_Argonaut_Decode_Generic_Rep.genericDecodeJson(genericTransfer)(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Transfer";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsArgument(Data_Argonaut_Decode_Class.decodeJsonInt))));
  var decodeJsonQuote = new Data_Argonaut_Decode_Class.DecodeJson(Data_Argonaut_Decode_Generic_Rep.genericDecodeJson(genericQuote)(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Quote";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsArgument(Data_Argonaut_Decode_Class.decodeJsonInt))));
  var decodeJsonQuit = new Data_Argonaut_Decode_Class.DecodeJson(Data_Argonaut_Decode_Generic_Rep.genericDecodeJson(genericQuit)(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Quit";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsNoArguments)));
  var decodeJsonContribution = new Data_Argonaut_Decode_Class.DecodeJson(Data_Argonaut_Decode_Generic_Rep.genericDecodeJson(genericContribution)(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Contribution";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsArgument(Data_Argonaut_Decode_Class.decodeJsonInt))));
  var decodeJsonBook = new Data_Argonaut_Decode_Class.DecodeJson(Data_Argonaut_Decode_Generic_Rep.genericDecodeJson(genericBook)(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Book";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsArgument(Data_Argonaut_Decode_Class.decodeJsonString))));
  var decodeJsonAgree = new Data_Argonaut_Decode_Class.DecodeJson(Data_Argonaut_Decode_Generic_Rep.genericDecodeJson(genericAgree)(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Agree";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsNoArguments)));
  var branchS42 = Scribble_FSM.Branch;
  var branchS13 = Scribble_FSM.Branch;
  exports["Agree"] = Agree;
  exports["Book"] = Book;
  exports["Contribution"] = Contribution;
  exports["Quit"] = Quit;
  exports["Quote"] = Quote;
  exports["Transfer"] = Transfer;
  exports["genericQuote"] = genericQuote;
  exports["encodeJsonQuote"] = encodeJsonQuote;
  exports["decodeJsonQuote"] = decodeJsonQuote;
  exports["genericBook"] = genericBook;
  exports["encodeJsonBook"] = encodeJsonBook;
  exports["decodeJsonBook"] = decodeJsonBook;
  exports["genericAgree"] = genericAgree;
  exports["encodeJsonAgree"] = encodeJsonAgree;
  exports["decodeJsonAgree"] = decodeJsonAgree;
  exports["genericTransfer"] = genericTransfer;
  exports["encodeJsonTransfer"] = encodeJsonTransfer;
  exports["decodeJsonTransfer"] = decodeJsonTransfer;
  exports["genericQuit"] = genericQuit;
  exports["encodeJsonQuit"] = encodeJsonQuit;
  exports["decodeJsonQuit"] = decodeJsonQuit;
  exports["genericContribution"] = genericContribution;
  exports["encodeJsonContribution"] = encodeJsonContribution;
  exports["decodeJsonContribution"] = decodeJsonContribution;
  exports["protocolNameTwoBuyer"] = protocolNameTwoBuyer;
  exports["protocolRoleNamesTwoBuyer"] = protocolRoleNamesTwoBuyer;
  exports["roleNameBuyer2"] = roleNameBuyer2;
  exports["initialBuyer2"] = initialBuyer2;
  exports["terminalBuyer2"] = terminalBuyer2;
  exports["receiveS23"] = receiveS23;
  exports["receiveS25"] = receiveS25;
  exports["sendS26Agree"] = sendS26Agree;
  exports["sendS26Quit"] = sendS26Quit;
  exports["selectS26"] = selectS26;
  exports["sendS27"] = sendS27;
  exports["sendS29"] = sendS29;
  exports["sendS28"] = sendS28;
  exports["roleNameBuyer1"] = roleNameBuyer1;
  exports["initialBuyer1"] = initialBuyer1;
  exports["terminalBuyer1"] = terminalBuyer1;
  exports["sendS9"] = sendS9;
  exports["receiveS11"] = receiveS11;
  exports["sendS12"] = sendS12;
  exports["receiveS13Agree"] = receiveS13Agree;
  exports["receiveS13Quit"] = receiveS13Quit;
  exports["branchS13"] = branchS13;
  exports["sendS14"] = sendS14;
  exports["roleNameSeller"] = roleNameSeller;
  exports["initialSeller"] = initialSeller;
  exports["terminalSeller"] = terminalSeller;
  exports["receiveS38"] = receiveS38;
  exports["sendS40"] = sendS40;
  exports["sendS41"] = sendS41;
  exports["receiveS42Agree"] = receiveS42Agree;
  exports["receiveS42Quit"] = receiveS42Quit;
  exports["branchS42"] = branchS42;
  exports["receiveS43"] = receiveS43;
  exports["receiveS44"] = receiveS44;
})(PS["Scribble.Protocol.Multiparty.TwoBuyer"] = PS["Scribble.Protocol.Multiparty.TwoBuyer"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Coroutine = PS["Control.Coroutine"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Aff_AVar = PS["Control.Monad.Aff.AVar"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_Event_EventTarget = PS["DOM.Event.EventTarget"];
  var DOM_Websocket_Event_EventTypes = PS["DOM.Websocket.Event.EventTypes"];
  var DOM_Websocket_Event_MessageEvent = PS["DOM.Websocket.Event.MessageEvent"];
  var DOM_Websocket_Event_Types = PS["DOM.Websocket.Event.Types"];
  var DOM_Websocket_Types = PS["DOM.Websocket.Types"];
  var DOM_Websocket_WebSocket = PS["DOM.Websocket.WebSocket"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Argonaut_Parser = PS["Data.Argonaut.Parser"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Scribble_Core = PS["Scribble.Core"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var Open = (function () {
      function Open() {

      };
      Open.value = new Open();
      return Open;
  })();
  var Closed = (function () {
      function Closed() {

      };
      Closed.value = new Closed();
      return Closed;
  })();
  var WebSocket = (function () {
      function WebSocket(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      WebSocket.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new WebSocket(value0, value1, value2);
              };
          };
      };
      return WebSocket;
  })();
  var send = function (v) {
      return function (x) {
          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.readVar(v.value0))(function (v1) {
              if (v1 instanceof Open) {
                  return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(DOM_Websocket_WebSocket.sendString(v.value2)(Data_Argonaut_Core.stringify(x)));
              };
              if (v1 instanceof Closed) {
                  return Control_Monad_Error_Class.throwError(Control_Monad_Aff.monadThrowAff)(Control_Monad_Eff_Exception.error("Channel is closed"));
              };
              throw new Error("Failed pattern match at Scribble.WebSocket line 100, column 3 - line 104, column 1: " + [ v1.constructor.name ]);
          });
      };
  };
  var receive = function (v) {
      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.readVar(v.value0))(function (v1) {
          if (v1 instanceof Open) {
              return Control_Monad_Aff_AVar.takeVar(v.value1);
          };
          if (v1 instanceof Closed) {
              return Control_Monad_Error_Class.throwError(Control_Monad_Aff.monadThrowAff)(Control_Monad_Eff_Exception.error("Channel is closed"));
          };
          throw new Error("Failed pattern match at Scribble.WebSocket line 107, column 3 - line 111, column 1: " + [ v1.constructor.name ]);
      });
  };
  var modifyVar = function (f) {
      return function (v) {
          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.takeVar(v))(function (v1) {
              return Control_Monad_Aff_AVar.putVar(f(v1))(v);
          });
      };
  };
  var open = function (url) {
      var readHelper = function (read) {
          return function ($35) {
              return Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create)(Control_Monad_Except.runExcept(read(Data_Foreign.toForeign($35))));
          };
      };
      var receiveListener = function (ibuf) {
          return DOM_Event_EventTarget.eventListener(function (ev) {
              return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(readHelper(DOM_Websocket_Event_Types.readMessageEvent)(ev))(function (msgEvent) {
                  return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(readHelper(Data_Foreign.readString)(DOM_Websocket_Event_MessageEvent.data_(msgEvent)))(function (msg) {
                      return Data_Either.either(function (e) {
                          return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
                      })(function ($36) {
                          return Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_Aff.launchAff(Data_Function.flip(Control_Monad_Aff_AVar.putVar)(ibuf)($36)));
                      })(Data_Argonaut_Parser.jsonParser(msg));
                  });
              });
          });
      };
      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.makeEmptyVar)(function (v) {
          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.makeEmptyVar)(function (v1) {
              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(DOM_Websocket_WebSocket.create(url)([  ])))(function (v2) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(DOM_Event_EventTarget.addEventListener(DOM_Websocket_Event_EventTypes.onMessage)(receiveListener(v1))(false)(DOM_Websocket_Types.socketToEventTarget(v2))))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(DOM_Event_EventTarget.addEventListener(DOM_Websocket_Event_EventTypes.onOpen)(DOM_Event_EventTarget.eventListener(function (v3) {
                          return Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_Aff.launchAff(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Unsafe.unsafeCoerceEff(Control_Monad_Eff_Console.log("open"))))(function () {
                              return Control_Monad_Aff_AVar.putVar(Open.value)(v);
                          })));
                      }))(false)(DOM_Websocket_Types.socketToEventTarget(v2))))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(DOM_Event_EventTarget.addEventListener(DOM_Websocket_Event_EventTypes.onClose)(DOM_Event_EventTarget.eventListener(function (v3) {
                              return Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_Aff.launchAff(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Unsafe.unsafeCoerceEff(Control_Monad_Eff_Console.log("close"))))(function () {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(modifyVar(Data_Function["const"](Closed.value))(v))(function () {
                                      return Control_Monad_Error_Class.throwError(Control_Monad_Aff.monadThrowAff)(Control_Monad_Eff_Exception.error("Connection closed"));
                                  });
                              })));
                          }))(false)(DOM_Websocket_Types.socketToEventTarget(v2))))(function () {
                              return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(new WebSocket(v, v1, v2));
                          });
                      });
                  });
              });
          });
      });
  };
  var close = function (v) {
      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.readVar(v.value0))(function (v1) {
          if (v1 instanceof Open) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(modifyVar(Data_Function["const"](Closed.value))(v.value0))(function () {
                  return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(DOM_Websocket_WebSocket.close(v.value2));
              });
          };
          if (v1 instanceof Closed) {
              return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(Data_Unit.unit);
          };
          throw new Error("Failed pattern match at Scribble.WebSocket line 114, column 3 - line 118, column 24: " + [ v1.constructor.name ]);
      });
  };
  var transportWebSocket = new Scribble_Core.Transport(close, open, receive, send);
  exports["Open"] = Open;
  exports["Closed"] = Closed;
  exports["WebSocket"] = WebSocket;
  exports["close"] = close;
  exports["modifyVar"] = modifyVar;
  exports["open"] = open;
  exports["receive"] = receive;
  exports["send"] = send;
  exports["transportWebSocket"] = transportWebSocket;
})(PS["Scribble.WebSocket"] = PS["Scribble.WebSocket"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Aff_AVar = PS["Control.Monad.Aff.AVar"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Parallel = PS["Control.Parallel"];
  var Control_Parallel_Class = PS["Control.Parallel.Class"];
  var DOM = PS["DOM"];
  var DOM_HTML_History = PS["DOM.HTML.History"];
  var DOM_Websocket_WebSocket = PS["DOM.Websocket.WebSocket"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Scribble_Core = PS["Scribble.Core"];
  var Scribble_FSM = PS["Scribble.FSM"];
  var Scribble_Indexed = PS["Scribble.Indexed"];
  var Scribble_Protocol_Arithmetic_AdditionServer = PS["Scribble.Protocol.Arithmetic.AdditionServer"];
  var Scribble_Protocol_Arithmetic_MathServer = PS["Scribble.Protocol.Arithmetic.MathServer"];
  var Scribble_Protocol_Multiparty_TwoBuyer = PS["Scribble.Protocol.Multiparty.TwoBuyer"];
  var Scribble_Type_SList = PS["Scribble.Type.SList"];
  var Scribble_WebSocket = PS["Scribble.WebSocket"];
  var Type_Proxy = PS["Type.Proxy"];
  var Type_Row = PS["Type.Row"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var server = function (c) {
      return Scribble_Core.choice(Scribble_Protocol_Arithmetic_MathServer.branchS20)(Scribble_Protocol_Arithmetic_MathServer.terminalServer)(Scribble_WebSocket.transportWebSocket)(Scribble_Core.functionCons(Scribble_Core.functionCons(Scribble_Core.functionCons(Scribble_Core.functionNil))))(Type_Row.listToRowCons(Type_Row.listToRowCons(Type_Row.listToRowCons(Type_Row.listToRowNil)())())())(c)({
          quit: function (c1) {
              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Scribble_Core.receive(Scribble_Protocol_Arithmetic_MathServer.receiveS20Quit)(Scribble_WebSocket.transportWebSocket)(Scribble_Protocol_Arithmetic_MathServer.decodeJsonQuit)(c1))(function (v) {
                  return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v.value1);
              });
          }, 
          add: function (c1) {
              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Scribble_Core.receive(Scribble_Protocol_Arithmetic_MathServer.receiveS20Add)(Scribble_WebSocket.transportWebSocket)(Scribble_Protocol_Arithmetic_MathServer.decodeJsonAdd)(c1))(function (v) {
                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(Scribble_Core.send(Scribble_Protocol_Arithmetic_MathServer.sendS22)(Scribble_Protocol_Arithmetic_MathServer.roleNameClient)(new Data_Symbol.IsSymbol(function () {
                      return "Client";
                  }))(Scribble_WebSocket.transportWebSocket)(Scribble_Protocol_Arithmetic_MathServer.encodeJsonSum)(v.value1)(new Scribble_Protocol_Arithmetic_MathServer.Sum(v.value0.value0 + v.value0.value1 | 0)))(function (v1) {
                      return server(v1);
                  });
              });
          }, 
          multiply: function (c1) {
              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Scribble_Core.receive(Scribble_Protocol_Arithmetic_MathServer.receiveS20Multiply)(Scribble_WebSocket.transportWebSocket)(Scribble_Protocol_Arithmetic_MathServer.decodeJsonMultiply)(c1))(function (v) {
                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(Scribble_Core.send(Scribble_Protocol_Arithmetic_MathServer.sendS23)(Scribble_Protocol_Arithmetic_MathServer.roleNameClient)(new Data_Symbol.IsSymbol(function () {
                      return "Client";
                  }))(Scribble_WebSocket.transportWebSocket)(Scribble_Protocol_Arithmetic_MathServer.encodeJsonProduct)(v.value1)(new Scribble_Protocol_Arithmetic_MathServer.Product(v.value0.value0 * v.value0.value1 | 0)))(function (v1) {
                      return server(v1);
                  });
              });
          }
      });
  };
  var seller = Scribble_Core.multiSession(Scribble_Protocol_Multiparty_TwoBuyer.roleNameSeller)(new Data_Symbol.IsSymbol(function () {
      return "Seller";
  }))(Scribble_Protocol_Multiparty_TwoBuyer.protocolNameTwoBuyer)(new Data_Symbol.IsSymbol(function () {
      return "TwoBuyer";
  }))(Scribble_Protocol_Multiparty_TwoBuyer.protocolRoleNamesTwoBuyer)(Scribble_Type_SList.consSymbols(new Data_Symbol.IsSymbol(function () {
      return "Buyer1";
  }))(Scribble_Type_SList.consSymbols(new Data_Symbol.IsSymbol(function () {
      return "Buyer2";
  }))(Scribble_Type_SList.consSymbols(new Data_Symbol.IsSymbol(function () {
      return "Seller";
  }))(Scribble_Type_SList.nilSymbols))))(Scribble_Type_SList.removeTail(Scribble_Type_SList.removeTail(Scribble_Type_SList.removeHead)))(Scribble_Type_SList.consSymbols(new Data_Symbol.IsSymbol(function () {
      return "Buyer1";
  }))(Scribble_Type_SList.consSymbols(new Data_Symbol.IsSymbol(function () {
      return "Buyer2";
  }))(Scribble_Type_SList.nilSymbols)))(Scribble_Type_SList.toHomoRowCons(Scribble_Type_SList.toHomoRowCons(Scribble_Type_SList.toHomoRowNil)))(Scribble_Type_SList.recordKVCons(new Data_Symbol.IsSymbol(function () {
      return "Buyer1";
  }))(Scribble_Core.identifierShow)(Scribble_Type_SList.recordKVCons(new Data_Symbol.IsSymbol(function () {
      return "Buyer2";
  }))(Scribble_Core.identifierShow)(Scribble_Type_SList.recordKVNil)(Type_Row.rowLacks()()()(Type_Row.rowLacking))())(Type_Row.rowLacks()()()(Type_Row.rowLacking))())(Type_Row.listToRowCons(Type_Row.listToRowCons(Type_Row.listToRowNil)())())(Scribble_Protocol_Multiparty_TwoBuyer.initialSeller)(Scribble_Protocol_Multiparty_TwoBuyer.terminalSeller)(Scribble_WebSocket.transportWebSocket)(Type_Proxy["Proxy"].value)(DOM_HTML_History.URL("ws://127.0.0.1:9160"))(Scribble_FSM.Protocol.value)(new Data_Tuple.Tuple(Scribble_FSM.Role.value, "Sally"))({
      Buyer1: "Billy", 
      Buyer2: "Bob"
  })(function (c) {
      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Scribble_Core.receive(Scribble_Protocol_Multiparty_TwoBuyer.receiveS38)(Scribble_WebSocket.transportWebSocket)(Scribble_Protocol_Multiparty_TwoBuyer.decodeJsonBook)(c))(function (v) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Console.log("Seller: \"" + (v.value0.value0 + "\" requested"))))(function () {
              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Scribble_Core.send(Scribble_Protocol_Multiparty_TwoBuyer.sendS40)(Scribble_Protocol_Multiparty_TwoBuyer.roleNameBuyer1)(new Data_Symbol.IsSymbol(function () {
                  return "Buyer1";
              }))(Scribble_WebSocket.transportWebSocket)(Scribble_Protocol_Multiparty_TwoBuyer.encodeJsonQuote)(v.value1)(new Scribble_Protocol_Multiparty_TwoBuyer.Quote(30)))(function (v1) {
                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(Scribble_Core.send(Scribble_Protocol_Multiparty_TwoBuyer.sendS41)(Scribble_Protocol_Multiparty_TwoBuyer.roleNameBuyer2)(new Data_Symbol.IsSymbol(function () {
                      return "Buyer2";
                  }))(Scribble_WebSocket.transportWebSocket)(Scribble_Protocol_Multiparty_TwoBuyer.encodeJsonQuote)(v1)(new Scribble_Protocol_Multiparty_TwoBuyer.Quote(30)))(function (v2) {
                      return Scribble_Core.choice(Scribble_Protocol_Multiparty_TwoBuyer.branchS42)(Scribble_Protocol_Multiparty_TwoBuyer.terminalSeller)(Scribble_WebSocket.transportWebSocket)(Scribble_Core.functionCons(Scribble_Core.functionCons(Scribble_Core.functionNil)))(Type_Row.listToRowCons(Type_Row.listToRowCons(Type_Row.listToRowNil)())())(v2)({
                          agree: function (c4) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Console.log("Seller: The decided to buy the book!")))(function () {
                                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(Scribble_Core.receive(Scribble_Protocol_Multiparty_TwoBuyer.receiveS42Agree)(Scribble_WebSocket.transportWebSocket)(Scribble_Protocol_Multiparty_TwoBuyer.decodeJsonAgree)(c4))(function (v3) {
                                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Scribble_Core.receive(Scribble_Protocol_Multiparty_TwoBuyer.receiveS43)(Scribble_WebSocket.transportWebSocket)(Scribble_Protocol_Multiparty_TwoBuyer.decodeJsonTransfer)(v3.value1))(function (v4) {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Console.log("Seller: Received \xa3" + (Data_Show.show(Data_Show.showInt)(v4.value0.value0) + " from Buyer 1"))))(function () {
                                              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Scribble_Core.receive(Scribble_Protocol_Multiparty_TwoBuyer.receiveS44)(Scribble_WebSocket.transportWebSocket)(Scribble_Protocol_Multiparty_TwoBuyer.decodeJsonTransfer)(v4.value1))(function (v5) {
                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Console.log("Seller: Received \xa3" + (Data_Show.show(Data_Show.showInt)(v5.value0.value0) + " from Buyer 2"))))(function () {
                                                      return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v5.value1);
                                                  });
                                              });
                                          });
                                      });
                                  });
                              });
                          }, 
                          quit: function (c4) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Console.log("Seller: The decided not to buy the book!")))(function () {
                                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(Scribble_Core.receive(Scribble_Protocol_Multiparty_TwoBuyer.receiveS42Quit)(Scribble_WebSocket.transportWebSocket)(Scribble_Protocol_Multiparty_TwoBuyer.decodeJsonQuit)(c4))(function (v3) {
                                      return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v3.value1);
                                  });
                              });
                          }
                      });
                  });
              });
          });
      });
  });
  var runServer = Scribble_Core.multiSession(Scribble_Protocol_Arithmetic_MathServer.roleNameServer)(new Data_Symbol.IsSymbol(function () {
      return "Server";
  }))(Scribble_Protocol_Arithmetic_MathServer.protocolNameMathServer)(new Data_Symbol.IsSymbol(function () {
      return "MathServer";
  }))(Scribble_Protocol_Arithmetic_MathServer.protocolRoleNamesMathServer)(Scribble_Type_SList.consSymbols(new Data_Symbol.IsSymbol(function () {
      return "Client";
  }))(Scribble_Type_SList.consSymbols(new Data_Symbol.IsSymbol(function () {
      return "Server";
  }))(Scribble_Type_SList.nilSymbols)))(Scribble_Type_SList.removeTail(Scribble_Type_SList.removeHead))(Scribble_Type_SList.consSymbols(new Data_Symbol.IsSymbol(function () {
      return "Client";
  }))(Scribble_Type_SList.nilSymbols))(Scribble_Type_SList.toHomoRowCons(Scribble_Type_SList.toHomoRowNil))(Scribble_Type_SList.recordKVCons(new Data_Symbol.IsSymbol(function () {
      return "Client";
  }))(Scribble_Core.identifierShow)(Scribble_Type_SList.recordKVNil)(Type_Row.rowLacks()()()(Type_Row.rowLacking))())(Type_Row.listToRowCons(Type_Row.listToRowNil)())(Scribble_Protocol_Arithmetic_MathServer.initialServer)(Scribble_Protocol_Arithmetic_MathServer.terminalServer)(Scribble_WebSocket.transportWebSocket)(Type_Proxy["Proxy"].value)(DOM_HTML_History.URL("ws://127.0.0.1:9160"))(Scribble_FSM.Protocol.value)(new Data_Tuple.Tuple(Scribble_FSM.Role.value, "Bob"))({
      Client: "Billy"
  })(server);
  var fib = function (n) {
      return function (c) {
          if (n <= 1) {
              return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(new Data_Tuple.Tuple(1, c));
          };
          if (Data_Boolean.otherwise) {
              return Control_Bind.bind(Control_Monad_Aff.bindAff)(fib(n - 1 | 0)(c))(function (v) {
                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(fib(n - 2 | 0)(v.value1))(function (v1) {
                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Scribble_Core.select(Scribble_Protocol_Arithmetic_MathServer.selectS9)(Scribble_Protocol_Arithmetic_MathServer.roleNameServer)(new Data_Symbol.IsSymbol(function () {
                          return "Server";
                      }))(Scribble_WebSocket.transportWebSocket)(Scribble_Core.elemTail(Scribble_Core.elemTail(Scribble_Core.elemHead)))(new Data_Symbol.IsSymbol(function () {
                          return "add";
                      }))(v1.value1)(Data_Symbol.SProxy.value))(function (v2) {
                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Scribble_Core.send(Scribble_Protocol_Arithmetic_MathServer.sendS9Add)(Scribble_Protocol_Arithmetic_MathServer.roleNameServer)(new Data_Symbol.IsSymbol(function () {
                              return "Server";
                          }))(Scribble_WebSocket.transportWebSocket)(Scribble_Protocol_Arithmetic_MathServer.encodeJsonAdd)(v2)(new Scribble_Protocol_Arithmetic_MathServer.Add(v.value0, v1.value0)))(function (v3) {
                              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Scribble_Core.receive(Scribble_Protocol_Arithmetic_MathServer.receiveS11)(Scribble_WebSocket.transportWebSocket)(Scribble_Protocol_Arithmetic_MathServer.decodeJsonSum)(v3))(function (v4) {
                                  return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(new Data_Tuple.Tuple(v4.value0.value0, v4.value1));
                              });
                          });
                      });
                  });
              });
          };
          throw new Error("Failed pattern match at Main line 179, column 1 - line 179, column 127: " + [ n.constructor.name, c.constructor.name ]);
      };
  };
  var prog = function (n) {
      return Scribble_Core.multiSession(Scribble_Protocol_Arithmetic_MathServer.roleNameClient)(new Data_Symbol.IsSymbol(function () {
          return "Client";
      }))(Scribble_Protocol_Arithmetic_MathServer.protocolNameMathServer)(new Data_Symbol.IsSymbol(function () {
          return "MathServer";
      }))(Scribble_Protocol_Arithmetic_MathServer.protocolRoleNamesMathServer)(Scribble_Type_SList.consSymbols(new Data_Symbol.IsSymbol(function () {
          return "Client";
      }))(Scribble_Type_SList.consSymbols(new Data_Symbol.IsSymbol(function () {
          return "Server";
      }))(Scribble_Type_SList.nilSymbols)))(Scribble_Type_SList.removeHead)(Scribble_Type_SList.consSymbols(new Data_Symbol.IsSymbol(function () {
          return "Server";
      }))(Scribble_Type_SList.nilSymbols))(Scribble_Type_SList.toHomoRowCons(Scribble_Type_SList.toHomoRowNil))(Scribble_Type_SList.recordKVCons(new Data_Symbol.IsSymbol(function () {
          return "Server";
      }))(Scribble_Core.identifierShow)(Scribble_Type_SList.recordKVNil)(Type_Row.rowLacks()()()(Type_Row.rowLacking))())(Type_Row.listToRowCons(Type_Row.listToRowNil)())(Scribble_Protocol_Arithmetic_MathServer.initialClient)(Scribble_Protocol_Arithmetic_MathServer.terminalClient)(Scribble_WebSocket.transportWebSocket)(Type_Proxy["Proxy"].value)(DOM_HTML_History.URL("ws://127.0.0.1:9160"))(Scribble_FSM.Protocol.value)(new Data_Tuple.Tuple(Scribble_FSM.Role.value, "Billy"))({
          Server: "Bob"
      })(function (c) {
          return Control_Bind.bind(Control_Monad_Aff.bindAff)(fib(n)(c))(function (v) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Console.log(Data_Show.show(Data_Show.showInt)(v.value0))))(function () {
                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(Scribble_Core.select(Scribble_Protocol_Arithmetic_MathServer.selectS9)(Scribble_Protocol_Arithmetic_MathServer.roleNameServer)(new Data_Symbol.IsSymbol(function () {
                      return "Server";
                  }))(Scribble_WebSocket.transportWebSocket)(Scribble_Core.elemTail(Scribble_Core.elemHead))(new Data_Symbol.IsSymbol(function () {
                      return "quit";
                  }))(v.value1)(Data_Symbol.SProxy.value))(function (v1) {
                      return Scribble_Core.send(Scribble_Protocol_Arithmetic_MathServer.sendS9Quit)(Scribble_Protocol_Arithmetic_MathServer.roleNameServer)(new Data_Symbol.IsSymbol(function () {
                          return "Server";
                      }))(Scribble_WebSocket.transportWebSocket)(Scribble_Protocol_Arithmetic_MathServer.encodeJsonQuit)(v1)(Scribble_Protocol_Arithmetic_MathServer.Quit.value);
                  });
              });
          });
      });
  };
  var buyer2 = Scribble_Core.multiSession(Scribble_Protocol_Multiparty_TwoBuyer.roleNameBuyer2)(new Data_Symbol.IsSymbol(function () {
      return "Buyer2";
  }))(Scribble_Protocol_Multiparty_TwoBuyer.protocolNameTwoBuyer)(new Data_Symbol.IsSymbol(function () {
      return "TwoBuyer";
  }))(Scribble_Protocol_Multiparty_TwoBuyer.protocolRoleNamesTwoBuyer)(Scribble_Type_SList.consSymbols(new Data_Symbol.IsSymbol(function () {
      return "Buyer1";
  }))(Scribble_Type_SList.consSymbols(new Data_Symbol.IsSymbol(function () {
      return "Buyer2";
  }))(Scribble_Type_SList.consSymbols(new Data_Symbol.IsSymbol(function () {
      return "Seller";
  }))(Scribble_Type_SList.nilSymbols))))(Scribble_Type_SList.removeTail(Scribble_Type_SList.removeHead))(Scribble_Type_SList.consSymbols(new Data_Symbol.IsSymbol(function () {
      return "Buyer1";
  }))(Scribble_Type_SList.consSymbols(new Data_Symbol.IsSymbol(function () {
      return "Seller";
  }))(Scribble_Type_SList.nilSymbols)))(Scribble_Type_SList.toHomoRowCons(Scribble_Type_SList.toHomoRowCons(Scribble_Type_SList.toHomoRowNil)))(Scribble_Type_SList.recordKVCons(new Data_Symbol.IsSymbol(function () {
      return "Buyer1";
  }))(Scribble_Core.identifierShow)(Scribble_Type_SList.recordKVCons(new Data_Symbol.IsSymbol(function () {
      return "Seller";
  }))(Scribble_Core.identifierShow)(Scribble_Type_SList.recordKVNil)(Type_Row.rowLacks()()()(Type_Row.rowLacking))())(Type_Row.rowLacks()()()(Type_Row.rowLacking))())(Type_Row.listToRowCons(Type_Row.listToRowCons(Type_Row.listToRowNil)())())(Scribble_Protocol_Multiparty_TwoBuyer.initialBuyer2)(Scribble_Protocol_Multiparty_TwoBuyer.terminalBuyer2)(Scribble_WebSocket.transportWebSocket)(Type_Proxy["Proxy"].value)(DOM_HTML_History.URL("ws://127.0.0.1:9160"))(Scribble_FSM.Protocol.value)(new Data_Tuple.Tuple(Scribble_FSM.Role.value, "Bob"))({
      Buyer1: "Billy", 
      Seller: "Sally"
  })(function (c) {
      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Scribble_Core.receive(Scribble_Protocol_Multiparty_TwoBuyer.receiveS23)(Scribble_WebSocket.transportWebSocket)(Scribble_Protocol_Multiparty_TwoBuyer.decodeJsonQuote)(c))(function (v) {
          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Scribble_Core.receive(Scribble_Protocol_Multiparty_TwoBuyer.receiveS25)(Scribble_WebSocket.transportWebSocket)(Scribble_Protocol_Multiparty_TwoBuyer.decodeJsonContribution)(v.value1))(function (v1) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Console.log("Buyer2: Quoted \xa3" + (Data_Show.show(Data_Show.showInt)(v.value0.value0) + (", with Buyer1 offering \xa3" + Data_Show.show(Data_Show.showInt)(v1.value0.value0))))))(function () {
                  var cont = v.value0.value0 - v1.value0.value0 | 0;
                  var $87 = cont > 20;
                  if ($87) {
                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Scribble_Core.select(Scribble_Protocol_Multiparty_TwoBuyer.selectS26)(Scribble_Protocol_Multiparty_TwoBuyer.roleNameBuyer1)(new Data_Symbol.IsSymbol(function () {
                          return "Buyer1";
                      }))(Scribble_WebSocket.transportWebSocket)(Scribble_Core.elemHead)(new Data_Symbol.IsSymbol(function () {
                          return "quit";
                      }))(v1.value1)(Data_Symbol.SProxy.value))(function (v2) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Console.log("Buyer2: TB.Quit!")))(function () {
                              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Scribble_Core.send(Scribble_Protocol_Multiparty_TwoBuyer.sendS26Quit)(Scribble_Protocol_Multiparty_TwoBuyer.roleNameBuyer1)(new Data_Symbol.IsSymbol(function () {
                                  return "Buyer1";
                              }))(Scribble_WebSocket.transportWebSocket)(Scribble_Protocol_Multiparty_TwoBuyer.encodeJsonQuit)(v2)(Scribble_Protocol_Multiparty_TwoBuyer.Quit.value))(function (v3) {
                                  return Scribble_Core.send(Scribble_Protocol_Multiparty_TwoBuyer.sendS29)(Scribble_Protocol_Multiparty_TwoBuyer.roleNameSeller)(new Data_Symbol.IsSymbol(function () {
                                      return "Seller";
                                  }))(Scribble_WebSocket.transportWebSocket)(Scribble_Protocol_Multiparty_TwoBuyer.encodeJsonQuit)(v3)(Scribble_Protocol_Multiparty_TwoBuyer.Quit.value);
                              });
                          });
                      });
                  };
                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(Scribble_Core.select(Scribble_Protocol_Multiparty_TwoBuyer.selectS26)(Scribble_Protocol_Multiparty_TwoBuyer.roleNameBuyer1)(new Data_Symbol.IsSymbol(function () {
                      return "Buyer1";
                  }))(Scribble_WebSocket.transportWebSocket)(Scribble_Core.elemTail(Scribble_Core.elemHead))(new Data_Symbol.IsSymbol(function () {
                      return "agree";
                  }))(v1.value1)(Data_Symbol.SProxy.value))(function (v2) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Console.log("Buyer2: Agreeing!")))(function () {
                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Scribble_Core.send(Scribble_Protocol_Multiparty_TwoBuyer.sendS26Agree)(Scribble_Protocol_Multiparty_TwoBuyer.roleNameBuyer1)(new Data_Symbol.IsSymbol(function () {
                              return "Buyer1";
                          }))(Scribble_WebSocket.transportWebSocket)(Scribble_Protocol_Multiparty_TwoBuyer.encodeJsonAgree)(v2)(Scribble_Protocol_Multiparty_TwoBuyer.Agree.value))(function (v3) {
                              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Scribble_Core.send(Scribble_Protocol_Multiparty_TwoBuyer.sendS27)(Scribble_Protocol_Multiparty_TwoBuyer.roleNameSeller)(new Data_Symbol.IsSymbol(function () {
                                  return "Seller";
                              }))(Scribble_WebSocket.transportWebSocket)(Scribble_Protocol_Multiparty_TwoBuyer.encodeJsonAgree)(v3)(Scribble_Protocol_Multiparty_TwoBuyer.Agree.value))(function (v4) {
                                  return Scribble_Core.send(Scribble_Protocol_Multiparty_TwoBuyer.sendS28)(Scribble_Protocol_Multiparty_TwoBuyer.roleNameSeller)(new Data_Symbol.IsSymbol(function () {
                                      return "Seller";
                                  }))(Scribble_WebSocket.transportWebSocket)(Scribble_Protocol_Multiparty_TwoBuyer.encodeJsonTransfer)(v4)(new Scribble_Protocol_Multiparty_TwoBuyer.Transfer(cont));
                              });
                          });
                      });
                  });
              });
          });
      });
  });
  var buyer1 = Scribble_Indexed.multiSession(Scribble_Protocol_Multiparty_TwoBuyer.roleNameBuyer1)(new Data_Symbol.IsSymbol(function () {
      return "Buyer1";
  }))(Scribble_Protocol_Multiparty_TwoBuyer.protocolNameTwoBuyer)(new Data_Symbol.IsSymbol(function () {
      return "TwoBuyer";
  }))(Scribble_Protocol_Multiparty_TwoBuyer.protocolRoleNamesTwoBuyer)(Scribble_Type_SList.consSymbols(new Data_Symbol.IsSymbol(function () {
      return "Buyer1";
  }))(Scribble_Type_SList.consSymbols(new Data_Symbol.IsSymbol(function () {
      return "Buyer2";
  }))(Scribble_Type_SList.consSymbols(new Data_Symbol.IsSymbol(function () {
      return "Seller";
  }))(Scribble_Type_SList.nilSymbols))))(Scribble_Type_SList.removeHead)(Scribble_Type_SList.consSymbols(new Data_Symbol.IsSymbol(function () {
      return "Buyer2";
  }))(Scribble_Type_SList.consSymbols(new Data_Symbol.IsSymbol(function () {
      return "Seller";
  }))(Scribble_Type_SList.nilSymbols)))(Scribble_Type_SList.toHomoRowCons(Scribble_Type_SList.toHomoRowCons(Scribble_Type_SList.toHomoRowNil)))(Scribble_Type_SList.recordKVCons(new Data_Symbol.IsSymbol(function () {
      return "Buyer2";
  }))(Scribble_Indexed.identifierShow)(Scribble_Type_SList.recordKVCons(new Data_Symbol.IsSymbol(function () {
      return "Seller";
  }))(Scribble_Indexed.identifierShow)(Scribble_Type_SList.recordKVNil)(Type_Row.rowLacks()()()(Type_Row.rowLacking))())(Type_Row.rowLacks()()()(Type_Row.rowLacking))())(Type_Row.listToRowCons(Type_Row.listToRowCons(Type_Row.listToRowNil)())())(Scribble_Protocol_Multiparty_TwoBuyer.initialBuyer1)(Scribble_Protocol_Multiparty_TwoBuyer.terminalBuyer1)(Scribble_WebSocket.transportWebSocket)(Type_Proxy["Proxy"].value)(DOM_HTML_History.URL("ws://127.0.0.1:9160"))(Scribble_FSM.Protocol.value)(new Data_Tuple.Tuple(Scribble_FSM.Role.value, "Billy"))({
      Buyer2: "Bob", 
      Seller: "Sally"
  })(Scribble_Indexed.ibind(Scribble_Indexed.sessionIxMonad)(Scribble_Indexed.send(Scribble_Protocol_Multiparty_TwoBuyer.sendS9)(Scribble_Protocol_Multiparty_TwoBuyer.roleNameSeller)(new Data_Symbol.IsSymbol(function () {
      return "Seller";
  }))(Scribble_WebSocket.transportWebSocket)(Scribble_Protocol_Multiparty_TwoBuyer.encodeJsonBook)(new Scribble_Protocol_Multiparty_TwoBuyer.Book("War and Peace")))(function () {
      return Scribble_Indexed.ibind(Scribble_Indexed.sessionIxMonad)(Scribble_Indexed.receive(Scribble_Protocol_Multiparty_TwoBuyer.receiveS11)(Scribble_WebSocket.transportWebSocket)(Scribble_Protocol_Multiparty_TwoBuyer.decodeJsonQuote))(function (v) {
          return Scribble_Indexed.ibind(Scribble_Indexed.sessionIxMonad)(Scribble_Indexed.aff(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Console.log("Buyer1: Quoted \xa3" + Data_Show.show(Data_Show.showInt)(v.value0)))))(function () {
              var cont = Data_Ord.min(Data_Ord.ordInt)(10)(v.value0);
              return Scribble_Indexed.ibind(Scribble_Indexed.sessionIxMonad)(Scribble_Indexed.send(Scribble_Protocol_Multiparty_TwoBuyer.sendS12)(Scribble_Protocol_Multiparty_TwoBuyer.roleNameBuyer2)(new Data_Symbol.IsSymbol(function () {
                  return "Buyer2";
              }))(Scribble_WebSocket.transportWebSocket)(Scribble_Protocol_Multiparty_TwoBuyer.encodeJsonContribution)(new Scribble_Protocol_Multiparty_TwoBuyer.Contribution(cont)))(function () {
                  return Scribble_Indexed.choice(Scribble_Protocol_Multiparty_TwoBuyer.branchS13)(Scribble_Protocol_Multiparty_TwoBuyer.terminalBuyer1)(Scribble_WebSocket.transportWebSocket)(Scribble_Indexed.functionCons(Scribble_Indexed.functionCons(Scribble_Indexed.functionNil)))(Type_Row.listToRowCons(Type_Row.listToRowCons(Type_Row.listToRowNil)())())({
                      agree: Scribble_Indexed.ibind(Scribble_Indexed.sessionIxMonad)(Scribble_Indexed.receive(Scribble_Protocol_Multiparty_TwoBuyer.receiveS13Agree)(Scribble_WebSocket.transportWebSocket)(Scribble_Protocol_Multiparty_TwoBuyer.decodeJsonAgree))(function (v1) {
                          return Scribble_Indexed.ibind(Scribble_Indexed.sessionIxMonad)(Scribble_Indexed.aff(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Console.log("Buyer1: Buyer2 agreed!"))))(function () {
                              return Scribble_Indexed.send(Scribble_Protocol_Multiparty_TwoBuyer.sendS14)(Scribble_Protocol_Multiparty_TwoBuyer.roleNameSeller)(new Data_Symbol.IsSymbol(function () {
                                  return "Seller";
                              }))(Scribble_WebSocket.transportWebSocket)(Scribble_Protocol_Multiparty_TwoBuyer.encodeJsonTransfer)(new Scribble_Protocol_Multiparty_TwoBuyer.Transfer(cont));
                          });
                      }), 
                      quit: Scribble_Indexed.ibind(Scribble_Indexed.sessionIxMonad)(Scribble_Indexed.receive(Scribble_Protocol_Multiparty_TwoBuyer.receiveS13Quit)(Scribble_WebSocket.transportWebSocket)(Scribble_Protocol_Multiparty_TwoBuyer.decodeJsonQuit))(function (v1) {
                          return Scribble_Indexed.aff(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Console.log("Buyer1: Buyer2 quit!")));
                      })
                  });
              });
          });
      });
  }));
  var main = Control_Monad_Aff.launchAff(Control_Parallel_Class.sequential(Control_Monad_Aff.parallelAff)(Control_Apply.apply(Control_Monad_Aff.applyParAff)(Control_Apply.apply(Control_Monad_Aff.applyParAff)(Data_Functor.map(Control_Monad_Aff.functorParAff)(function (v) {
      return function (v1) {
          return function (v2) {
              return Data_Unit.unit;
          };
      };
  })(Control_Parallel_Class.parallel(Control_Monad_Aff.parallelAff)(buyer1)))(Control_Parallel_Class.parallel(Control_Monad_Aff.parallelAff)(buyer2)))(Control_Parallel_Class.parallel(Control_Monad_Aff.parallelAff)(seller))));
  exports["buyer1"] = buyer1;
  exports["buyer2"] = buyer2;
  exports["fib"] = fib;
  exports["main"] = main;
  exports["prog"] = prog;
  exports["runServer"] = runServer;
  exports["seller"] = seller;
  exports["server"] = server;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();
